<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Entity\Repository;

use MU\YourCityModule\Entity\Repository\Base\AbstractLocationRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use MU\YourCityModule\Entity\LocationEntity;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for location entities.
 */
class LocationRepository extends AbstractLocationRepository
{
    /**
     * @var string The default sorting field/expression
     */
    protected $defaultSortingField = 'letterForOrder';
    
    /**
     * Builds a generic Doctrine query supporting WHERE and ORDER BY.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='')
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='')
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true)
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false)
     *
     * @return QueryBuilder Query builder instance to be further processed
     */
    public function genericBaseBlockQuery($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    {
    	// normally we select the whole table
    	$selection = 'tbl';
    
    	if (true === $slimMode) {
    		// but for the slim version we select only the basic fields, and no joins
    
    		$selection = 'tbl.id';
    
    
    		$selection .= ', tbl.name';
    
    
    		$selection .= ', tbl.zipCode';
    
    
    		$selection .= ', tbl.city';
    
    
    		$selection .= ', tbl.street';
    
    
    		$selection .= ', tbl.numberOfStreet';
    		$selection .= ', tbl.slug';
    		$useJoins = false;
    	}
    
    	if (true === $useJoins) {
    		$selection .= $this->addBlockJoinsToSelection();
    	}
    
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb->select($selection)
    	->from('MU\YourCityModule\Entity\LocationEntity', 'tbl');
    
    	if (true === $useJoins) {
    		$this->addBlockJoinsToFrom($qb);
    	}
    
    	if (!empty($where)) {
    		$qb->andWhere($where);
    	}
    
    	$this->genericBaseQueryAddOrderBy($qb, $orderBy);
    
    	return $qb;
    }
    
    /**
     * Returns query builder for selecting a list of objects with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='')
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='')
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true)
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false)
     *
     * @return QueryBuilder Query builder for the given arguments
     */
    public function getListQueryBuilder($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    { 	
    	$uid = \UserUtil::getVar('uid');
    	if (\UserUtil::isLoggedIn() && $uid != 2) {
    		$where = 'tbl.owner = ' . \DataUtil::formatForDisplay($uid) . ' or tbl.admin1 = ' . \DataUtil::formatForDisplay($uid)  .  ' or tbl.admin2 = ' . \DataUtil::formatForDisplay($uid);
    	}
    	//$useJoins = false;
    	$qb = $this->genericBaseQuery($where, $orderBy, $useJoins, $slimMode);
    	if ((!$useJoins || !$slimMode) && null !== $this->collectionFilterHelper) {
    		$qb = $this->collectionFilterHelper->addCommonViewFilters('location', $qb);
    	}
    
    	return $qb;
    }
    
    /**
     * Selects a list of objects with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='')
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='')
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true)
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false)
     *
     * @return ArrayCollection Collection containing retrieved locationEntity instances
     */
    public function selectWhereForModVars($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    {
    	$qb = $this->getListQueryBuilder($where, $orderBy, $useJoins, $slimMode);
    
    	$query = $this->getQueryFromBuilder($qb);
    
    	return $this->retrieveCollectionResult($query, false);
    }
    
    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause
     */
    protected function addJoinsToSelection()
    {
        $selection = ', tblAbonnements, tblBranches, tblServicesOfLocation, tblSpecialsOfLocation';
    
        return $selection;
    }
    
    /**
     * Helper method to add joins to from clause.
     *
     * @param QueryBuilder $qb Query builder instance used to create the query
     *
     * @return QueryBuilder The query builder enriched by additional joins
     */
    protected function addJoinsToFrom(QueryBuilder $qb)
    {
        $qb->leftJoin('tbl.abonnements', 'tblAbonnements');
        $qb->leftJoin('tbl.branches', 'tblBranches');
        $qb->leftJoin('tbl.servicesOfLocation', 'tblServicesOfLocation');
        $qb->leftJoin('tbl.specialsOfLocation', 'tblSpecialsOfLocation');
    
        return $qb;
    }
    
    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause
     */
    protected function addBlockJoinsToSelection()
    {
    	$selection = ', tblBranches';
    
    	return $selection;
    }
    
    /**
     * Helper method to add joins to from clause.
     *
     * @param QueryBuilder $qb Query builder instance used to create the query
     *
     * @return QueryBuilder The query builder enriched by additional joins
     */
    protected function addBlockJoinsToFrom(QueryBuilder $qb)
    {
    	$qb->leftJoin('tbl.branches', 'tblBranches');
    
    	return $qb;
    }
}
