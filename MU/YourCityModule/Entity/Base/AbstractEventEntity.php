<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\YourCityModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\YourCityModule\Traits\GeographicalTrait;
use MU\YourCityModule\Traits\StandardFieldsTrait;
use MU\YourCityModule\Validator\Constraints as YourCityAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for event entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractEventEntity extends EntityAccess implements Translatable
{
    /**
     * Hook geographical behaviour embedding latitude and longitude fields.
     */
    use GeographicalTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'event';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="event", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * Maximum 100 characters; better only 57 for SEO.
     * @Gedmo\Translatable
     * @ORM\Column(length=100)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="100")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * Maximum 2000 characters.
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=2000, nullable=true)
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Image of event meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageOfEventMeta
     */
    protected $imageOfEventMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $imageOfEvent
     */
    protected $imageOfEvent = null;
    
    /**
     * Full image of event path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageOfEventUrl
     */
    protected $imageOfEventUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="event", propertyName="kindOfEvent", multiple=true)
     * @var string $kindOfEvent
     */
    protected $kindOfEvent = 'other';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $street
     */
    protected $street = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $numberOfStreet
     */
    protected $numberOfStreet = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $zipCode
     */
    protected $zipCode = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $city
     */
    protected $city = '';
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank()
     * @Assert\DateTime()
     * @var DateTime $startDate
     */
    protected $startDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank()
     * @Assert\DateTime()
     * @var DateTime $endDate
     */
    protected $endDate;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var DateTime $start2Date
     */
    protected $start2Date;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var DateTime $end2Date
     */
    protected $end2Date;
    
    /**
     * Here you can enter the date and time from this event will appear in the overview of events.
     Then it will get put into the archive. Then you only are able to reuse it as model.
     If you do not enter a value, this event will be shown further after the end.
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var DateTime $inViewFrom
     */
    protected $inViewFrom;
    
    /**
     * Here you can enter the date and time until this event will appear in the overview of events.
     Then it will get put into the archive. Then you only are able to reuse it as model.
     If you do not enter a value, this event will be shown further after the end.
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @Assert\Expression("!value or value > this.getInViewFrom()")
     * @var DateTime $inViewUntil
     */
    protected $inViewUntil;
    
    /**
     * If you have more than one location, select the correct one!
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="event", propertyName="myLocation", multiple=false)
     * @var string $myLocation
     */
    protected $myLocation = '';
    
    
    /**
     * Used locale to override Translation listener's locale.
     * this is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    
    /**
     * EventEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = $description;
        }
    }
    
    /**
     * Returns the image of event.
     *
     * @return string
     */
    public function getImageOfEvent()
    {
        return $this->imageOfEvent;
    }
    
    /**
     * Sets the image of event.
     *
     * @param string $imageOfEvent
     *
     * @return void
     */
    public function setImageOfEvent($imageOfEvent)
    {
        if ($this->imageOfEvent !== $imageOfEvent) {
            $this->imageOfEvent = $imageOfEvent;
        }
    }
    
    /**
     * Returns the image of event url.
     *
     * @return string
     */
    public function getImageOfEventUrl()
    {
        return $this->imageOfEventUrl;
    }
    
    /**
     * Sets the image of event url.
     *
     * @param string $imageOfEventUrl
     *
     * @return void
     */
    public function setImageOfEventUrl($imageOfEventUrl)
    {
        if ($this->imageOfEventUrl !== $imageOfEventUrl) {
            $this->imageOfEventUrl = $imageOfEventUrl;
        }
    }
    
    /**
     * Returns the image of event meta.
     *
     * @return array
     */
    public function getImageOfEventMeta()
    {
        return $this->imageOfEventMeta;
    }
    
    /**
     * Sets the image of event meta.
     *
     * @param array $imageOfEventMeta
     *
     * @return void
     */
    public function setImageOfEventMeta($imageOfEventMeta = [])
    {
        if ($this->imageOfEventMeta !== $imageOfEventMeta) {
            $this->imageOfEventMeta = $imageOfEventMeta;
        }
    }
    
    /**
     * Returns the kind of event.
     *
     * @return string
     */
    public function getKindOfEvent()
    {
        return $this->kindOfEvent;
    }
    
    /**
     * Sets the kind of event.
     *
     * @param string $kindOfEvent
     *
     * @return void
     */
    public function setKindOfEvent($kindOfEvent)
    {
        if ($this->kindOfEvent !== $kindOfEvent) {
            $this->kindOfEvent = isset($kindOfEvent) ? $kindOfEvent : '';
        }
    }
    
    /**
     * Returns the street.
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->street;
    }
    
    /**
     * Sets the street.
     *
     * @param string $street
     *
     * @return void
     */
    public function setStreet($street)
    {
        if ($this->street !== $street) {
            $this->street = isset($street) ? $street : '';
        }
    }
    
    /**
     * Returns the number of street.
     *
     * @return string
     */
    public function getNumberOfStreet()
    {
        return $this->numberOfStreet;
    }
    
    /**
     * Sets the number of street.
     *
     * @param string $numberOfStreet
     *
     * @return void
     */
    public function setNumberOfStreet($numberOfStreet)
    {
        if ($this->numberOfStreet !== $numberOfStreet) {
            $this->numberOfStreet = isset($numberOfStreet) ? $numberOfStreet : '';
        }
    }
    
    /**
     * Returns the zip code.
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->zipCode;
    }
    
    /**
     * Sets the zip code.
     *
     * @param string $zipCode
     *
     * @return void
     */
    public function setZipCode($zipCode)
    {
        if ($this->zipCode !== $zipCode) {
            $this->zipCode = isset($zipCode) ? $zipCode : '';
        }
    }
    
    /**
     * Returns the city.
     *
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
    
    /**
     * Sets the city.
     *
     * @param string $city
     *
     * @return void
     */
    public function setCity($city)
    {
        if ($this->city !== $city) {
            $this->city = isset($city) ? $city : '';
        }
    }
    
    /**
     * Returns the start date.
     *
     * @return DateTime
     */
    public function getStartDate()
    {
        return $this->startDate;
    }
    
    /**
     * Sets the start date.
     *
     * @param DateTime $startDate
     *
     * @return void
     */
    public function setStartDate($startDate)
    {
        if ($this->startDate !== $startDate) {
            if (is_object($startDate) && $startDate instanceOf \DateTime) {
                $this->startDate = $startDate;
            } else {
                $this->startDate = new \DateTime($startDate);
            }
        }
    }
    
    /**
     * Returns the end date.
     *
     * @return DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Sets the end date.
     *
     * @param DateTime $endDate
     *
     * @return void
     */
    public function setEndDate($endDate)
    {
        if ($this->endDate !== $endDate) {
            if (is_object($endDate) && $endDate instanceOf \DateTime) {
                $this->endDate = $endDate;
            } else {
                $this->endDate = new \DateTime($endDate);
            }
        }
    }
    
    /**
     * Returns the start 2 date.
     *
     * @return DateTime
     */
    public function getStart2Date()
    {
        return $this->start2Date;
    }
    
    /**
     * Sets the start 2 date.
     *
     * @param DateTime $start2Date
     *
     * @return void
     */
    public function setStart2Date($start2Date)
    {
        if ($this->start2Date !== $start2Date) {
            if (is_object($start2Date) && $start2Date instanceOf \DateTime) {
                $this->start2Date = $start2Date;
            } elseif (null === $start2Date || empty($start2Date)) {
                $this->start2Date = null;
            } else {
                $this->start2Date = new \DateTime($start2Date);
            }
        }
    }
    
    /**
     * Returns the end 2 date.
     *
     * @return DateTime
     */
    public function getEnd2Date()
    {
        return $this->end2Date;
    }
    
    /**
     * Sets the end 2 date.
     *
     * @param DateTime $end2Date
     *
     * @return void
     */
    public function setEnd2Date($end2Date)
    {
        if ($this->end2Date !== $end2Date) {
            if (is_object($end2Date) && $end2Date instanceOf \DateTime) {
                $this->end2Date = $end2Date;
            } elseif (null === $end2Date || empty($end2Date)) {
                $this->end2Date = null;
            } else {
                $this->end2Date = new \DateTime($end2Date);
            }
        }
    }
    
    /**
     * Returns the in view from.
     *
     * @return DateTime
     */
    public function getInViewFrom()
    {
        return $this->inViewFrom;
    }
    
    /**
     * Sets the in view from.
     *
     * @param DateTime $inViewFrom
     *
     * @return void
     */
    public function setInViewFrom($inViewFrom)
    {
        if ($this->inViewFrom !== $inViewFrom) {
            if (is_object($inViewFrom) && $inViewFrom instanceOf \DateTime) {
                $this->inViewFrom = $inViewFrom;
            } elseif (null === $inViewFrom || empty($inViewFrom)) {
                $this->inViewFrom = null;
            } else {
                $this->inViewFrom = new \DateTime($inViewFrom);
            }
        }
    }
    
    /**
     * Returns the in view until.
     *
     * @return DateTime
     */
    public function getInViewUntil()
    {
        return $this->inViewUntil;
    }
    
    /**
     * Sets the in view until.
     *
     * @param DateTime $inViewUntil
     *
     * @return void
     */
    public function setInViewUntil($inViewUntil)
    {
        if ($this->inViewUntil !== $inViewUntil) {
            if (is_object($inViewUntil) && $inViewUntil instanceOf \DateTime) {
                $this->inViewUntil = $inViewUntil;
            } elseif (null === $inViewUntil || empty($inViewUntil)) {
                $this->inViewUntil = null;
            } else {
                $this->inViewUntil = new \DateTime($inViewUntil);
            }
        }
    }
    
    /**
     * Returns the my location.
     *
     * @return string
     */
    public function getMyLocation()
    {
        return $this->myLocation;
    }
    
    /**
     * Sets the my location.
     *
     * @param string $myLocation
     *
     * @return void
     */
    public function setMyLocation($myLocation)
    {
        if ($this->myLocation !== $myLocation) {
            $this->myLocation = isset($myLocation) ? $myLocation : '';
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        if ($this->locale != $locale) {
            $this->locale = $locale;
        }
    }
    
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muyourcitymodule.ui_hooks.events';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Event ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setImageOfEvent(null);
        $this->setImageOfEventMeta([]);
        $this->setImageOfEventUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
