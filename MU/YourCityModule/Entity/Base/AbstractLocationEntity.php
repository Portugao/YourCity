<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Zikula\Core\Doctrine\EntityAccess;
use Zikula\UsersModule\Entity\UserEntity;
use MU\YourCityModule\Traits\GeographicalTrait;
use MU\YourCityModule\Traits\StandardFieldsTrait;
use MU\YourCityModule\Validator\Constraints as YourCityAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for location entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractLocationEntity extends EntityAccess implements Translatable
{
    /**
     * Hook geographical behaviour embedding latitude and longitude fields.
     */
    use GeographicalTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'location';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="location", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * Enter the name of your company. If your company is registered somewhere, enter the exact name.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * Enter the letter for ordering of the location.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $letterForOrder
     */
    protected $letterForOrder = '';
    
    /**
     * Slogan or additional name of your company.
     * @Gedmo\Translatable
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $slogan
     */
    protected $slogan = '';
    
    /**
     * Logo of your location meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $logoOfYourLocationMeta
     */
    protected $logoOfYourLocationMeta = [];
    
    /**
     * If your location has a logo, you can upload it here.
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    maxSize = "100k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     *    maxWidth = 400,
     *    maxHeight = 400,
     *    allowLandscape = false,
     *    allowPortrait = false
     * )
     * @var string $logoOfYourLocation
     */
    protected $logoOfYourLocation = null;
    
    /**
     * Full logo of your location path as url.
     *
     * @Assert\Type(type="string")
     * @var string $logoOfYourLocationUrl
     */
    protected $logoOfYourLocationUrl = '';
    
    /**
     * Enter the description for google and Co.
     Only 170 characters are allowed.
     * @Gedmo\Translatable
     * @ORM\Column(length=170, nullable=true)
     * @Assert\Length(min="0", max="170")
     * @var string $descriptionForGoogle
     */
    protected $descriptionForGoogle = '';
    
    /**
     * Enter a description of your location (company) and your products.
     Maximum 2000 characters.
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=2000, nullable=true)
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Maximum 2000 characters.
     Premium option.
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=2000, nullable=true)
     * @Assert\Length(min="0", max="2000")
     * @var text $description2
     */
    protected $description2 = '';
    
    /**
     * Image of location meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageOfLocationMeta
     */
    protected $imageOfLocationMeta = [];
    
    /**
     * Here you can upload an image, that represents your company.
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $imageOfLocation
     */
    protected $imageOfLocation = null;
    
    /**
     * Full image of location path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageOfLocationUrl
     */
    protected $imageOfLocationUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $street
     */
    protected $street = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $numberOfStreet
     */
    protected $numberOfStreet = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $zipCode
     */
    protected $zipCode = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $city
     */
    protected $city = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $telefon
     */
    protected $telefon = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $mobil
     */
    protected $mobil = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\Url(checkDNS=false)
     * @var string $homepage
     */
    protected $homepage = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $bsagStop
     */
    protected $bsagStop = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $tram
     */
    protected $tram = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $bus
     */
    protected $bus = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedForEver
     */
    protected $closedForEver = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $agreement
     */
    protected $agreement = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $unclearTimes
     */
    protected $unclearTimes = false;
    
    /**
     * Make extended informations about the opening hours!
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $openingHours
     */
    protected $openingHours = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnMonday
     */
    protected $closedOnMonday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnMonday
     */
    protected $startOnMonday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnMonday
     */
    protected $endOnMonday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnMonday
     */
    protected $start2OnMonday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnMonday
     */
    protected $end2OnMonday;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnTuesday
     */
    protected $closedOnTuesday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnTuesday
     */
    protected $startOnTuesday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnTuesday
     */
    protected $endOnTuesday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnTuesday
     */
    protected $start2OnTuesday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnTuesday
     */
    protected $end2OnTuesday;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnWednesday
     */
    protected $closedOnWednesday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnWednesday
     */
    protected $startOnWednesday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnWednesday
     */
    protected $endOnWednesday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnWednesday
     */
    protected $start2OnWednesday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnWednesday
     */
    protected $end2OnWednesday;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnThursday
     */
    protected $closedOnThursday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnThursday
     */
    protected $startOnThursday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnThursday
     */
    protected $endOnThursday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnThursday
     */
    protected $start2OnThursday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnThursday
     */
    protected $end2OnThursday;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnFriday
     */
    protected $closedOnFriday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnFriday
     */
    protected $startOnFriday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnFriday
     */
    protected $endOnFriday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnFriday
     */
    protected $start2OnFriday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnFriday
     */
    protected $end2OnFriday;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnSaturday
     */
    protected $closedOnSaturday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnSaturday
     */
    protected $startOnSaturday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnSaturday
     */
    protected $endOnSaturday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnSaturday
     */
    protected $start2OnSaturday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnSaturday
     */
    protected $end2OnSaturday;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $closedOnSunday
     */
    protected $closedOnSunday = false;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $startOnSunday
     */
    protected $startOnSunday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $endOnSunday
     */
    protected $endOnSunday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $start2OnSunday
     */
    protected $start2OnSunday;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $end2OnSunday
     */
    protected $end2OnSunday;
    
    /**
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid")
     * @var UserEntity $owner
     */
    protected $owner = null;
    
    /**
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid")
     * @var UserEntity $admin1
     */
    protected $admin1 = null;
    
    /**
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid")
     * @var UserEntity $admin2
     */
    protected $admin2 = null;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="location", propertyName="partOfCity", multiple=false)
     * @var string $partOfCity
     */
    protected $partOfCity = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="location", propertyName="branchOfLocation", multiple=true)
     * @var string $branchOfLocation
     */
    protected $branchOfLocation = '';
    
    
    /**
     * @Gedmo\Slug(fields={"name"}, updatable=true, unique=true, separator="-", style="lower")
     * @ORM\Column(type="string", length=255, unique=true)
     * @Assert\Length(min="1", max="255")
     * @var string $slug
     */
    protected $slug;
    
    /**
     * Used locale to override Translation listener's locale.
     * this is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    /**
     * Bidirectional - One location [location] has many imagesOfLocation [images of location] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\ImageOfLocationEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationimagesoflocation",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"positionOfImage" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the images of location is required.")
     * @var \MU\YourCityModule\Entity\ImageOfLocationEntity[] $imagesOfLocation
     */
    protected $imagesOfLocation = null;
    
    /**
     * Bidirectional - One location [location] has many filesOfLocation [files of location] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\FileOfLocationEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationfilesoflocation",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"positionOfFile" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the files of location is required.")
     * @var \MU\YourCityModule\Entity\FileOfLocationEntity[] $filesOfLocation
     */
    protected $filesOfLocation = null;
    
    /**
     * Bidirectional - One location [location] has many offers [offers] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\OfferEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationoffers",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"effectivFrom" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the offers is required.")
     * @var \MU\YourCityModule\Entity\OfferEntity[] $offers
     */
    protected $offers = null;
    
    /**
     * Bidirectional - One location [location] has many menuOfLocation [menus of location] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\MenuOfLocationEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationmenuoflocation",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"positionOfMenu" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the menu of location is required.")
     * @var \MU\YourCityModule\Entity\MenuOfLocationEntity[] $menuOfLocation
     */
    protected $menuOfLocation = null;
    
    /**
     * Bidirectional - One location [location] has many events [events] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\EventEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationevents",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"startDate" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the events is required.")
     * @var \MU\YourCityModule\Entity\EventEntity[] $events
     */
    protected $events = null;
    
    /**
     * Bidirectional - One location [location] has many products [products] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\ProductEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationproducts",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"name" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the products is required.")
     * @var \MU\YourCityModule\Entity\ProductEntity[] $products
     */
    protected $products = null;
    
    /**
     * Bidirectional - One location [location] has many dishes [dishes] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\DishEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationdishes",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"positionOfDish" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the dishes is required.")
     * @var \MU\YourCityModule\Entity\DishEntity[] $dishes
     */
    protected $dishes = null;
    
    /**
     * Bidirectional - Many locations [locations] have many specialsOfLocation [specials of location] (OWNING SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MU\YourCityModule\Entity\SpecialOfLocationEntity", inversedBy="locations")
     * @ORM\JoinTable(name="mu_yourcity_location_specialoflocation")
     * @ORM\OrderBy({"name" = "ASC"})
     * @var \MU\YourCityModule\Entity\SpecialOfLocationEntity[] $specialsOfLocation
     */
    protected $specialsOfLocation = null;
    /**
     * Bidirectional - Many locations [locations] have many servicesOfLocation [services of location] (OWNING SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MU\YourCityModule\Entity\ServiceOfLocationEntity", inversedBy="locations")
     * @ORM\JoinTable(name="mu_yourcity_location_serviceoflocation")
     * @ORM\OrderBy({"name" = "ASC"})
     * @var \MU\YourCityModule\Entity\ServiceOfLocationEntity[] $servicesOfLocation
     */
    protected $servicesOfLocation = null;
    /**
     * Bidirectional - One location [location] has many abonnements [abonnements] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\AbonnementEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationabonnements",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @Assert\NotNull(message="Choosing at least one of the abonnements is required.")
     * @var \MU\YourCityModule\Entity\AbonnementEntity[] $abonnements
     */
    protected $abonnements = null;
    
    /**
     * Bidirectional - One location [location] has many partsOfMenu [parts of menu] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourCityModule\Entity\PartOfMenuEntity", mappedBy="location")
     * @ORM\JoinTable(name="mu_yourcity_locationpartsofmenu",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @ORM\OrderBy({"name" = "ASC"})
     * @Assert\NotNull(message="Choosing at least one of the parts of menu is required.")
     * @var \MU\YourCityModule\Entity\PartOfMenuEntity[] $partsOfMenu
     */
    protected $partsOfMenu = null;
    
    
    /**
     * LocationEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->imagesOfLocation = new ArrayCollection();
        $this->filesOfLocation = new ArrayCollection();
        $this->offers = new ArrayCollection();
        $this->menuOfLocation = new ArrayCollection();
        $this->events = new ArrayCollection();
        $this->products = new ArrayCollection();
        $this->dishes = new ArrayCollection();
        $this->abonnements = new ArrayCollection();
        $this->partsOfMenu = new ArrayCollection();
        $this->specialsOfLocation = new ArrayCollection();
        $this->servicesOfLocation = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the letter for order.
     *
     * @return string
     */
    public function getLetterForOrder()
    {
        return $this->letterForOrder;
    }
    
    /**
     * Sets the letter for order.
     *
     * @param string $letterForOrder
     *
     * @return void
     */
    public function setLetterForOrder($letterForOrder)
    {
        if ($this->letterForOrder !== $letterForOrder) {
            $this->letterForOrder = isset($letterForOrder) ? $letterForOrder : '';
        }
    }
    
    /**
     * Returns the slogan.
     *
     * @return string
     */
    public function getSlogan()
    {
        return $this->slogan;
    }
    
    /**
     * Sets the slogan.
     *
     * @param string $slogan
     *
     * @return void
     */
    public function setSlogan($slogan)
    {
        if ($this->slogan !== $slogan) {
            $this->slogan = $slogan;
        }
    }
    
    /**
     * Returns the logo of your location.
     *
     * @return string
     */
    public function getLogoOfYourLocation()
    {
        return $this->logoOfYourLocation;
    }
    
    /**
     * Sets the logo of your location.
     *
     * @param string $logoOfYourLocation
     *
     * @return void
     */
    public function setLogoOfYourLocation($logoOfYourLocation)
    {
        if ($this->logoOfYourLocation !== $logoOfYourLocation) {
            $this->logoOfYourLocation = $logoOfYourLocation;
        }
    }
    
    /**
     * Returns the logo of your location url.
     *
     * @return string
     */
    public function getLogoOfYourLocationUrl()
    {
        return $this->logoOfYourLocationUrl;
    }
    
    /**
     * Sets the logo of your location url.
     *
     * @param string $logoOfYourLocationUrl
     *
     * @return void
     */
    public function setLogoOfYourLocationUrl($logoOfYourLocationUrl)
    {
        if ($this->logoOfYourLocationUrl !== $logoOfYourLocationUrl) {
            $this->logoOfYourLocationUrl = $logoOfYourLocationUrl;
        }
    }
    
    /**
     * Returns the logo of your location meta.
     *
     * @return array
     */
    public function getLogoOfYourLocationMeta()
    {
        return $this->logoOfYourLocationMeta;
    }
    
    /**
     * Sets the logo of your location meta.
     *
     * @param array $logoOfYourLocationMeta
     *
     * @return void
     */
    public function setLogoOfYourLocationMeta($logoOfYourLocationMeta = [])
    {
        if ($this->logoOfYourLocationMeta !== $logoOfYourLocationMeta) {
            $this->logoOfYourLocationMeta = $logoOfYourLocationMeta;
        }
    }
    
    /**
     * Returns the description for google.
     *
     * @return string
     */
    public function getDescriptionForGoogle()
    {
        return $this->descriptionForGoogle;
    }
    
    /**
     * Sets the description for google.
     *
     * @param string $descriptionForGoogle
     *
     * @return void
     */
    public function setDescriptionForGoogle($descriptionForGoogle)
    {
        if ($this->descriptionForGoogle !== $descriptionForGoogle) {
            $this->descriptionForGoogle = $descriptionForGoogle;
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = $description;
        }
    }
    
    /**
     * Returns the description 2.
     *
     * @return text
     */
    public function getDescription2()
    {
        return $this->description2;
    }
    
    /**
     * Sets the description 2.
     *
     * @param text $description2
     *
     * @return void
     */
    public function setDescription2($description2)
    {
        if ($this->description2 !== $description2) {
            $this->description2 = $description2;
        }
    }
    
    /**
     * Returns the image of location.
     *
     * @return string
     */
    public function getImageOfLocation()
    {
        return $this->imageOfLocation;
    }
    
    /**
     * Sets the image of location.
     *
     * @param string $imageOfLocation
     *
     * @return void
     */
    public function setImageOfLocation($imageOfLocation)
    {
        if ($this->imageOfLocation !== $imageOfLocation) {
            $this->imageOfLocation = $imageOfLocation;
        }
    }
    
    /**
     * Returns the image of location url.
     *
     * @return string
     */
    public function getImageOfLocationUrl()
    {
        return $this->imageOfLocationUrl;
    }
    
    /**
     * Sets the image of location url.
     *
     * @param string $imageOfLocationUrl
     *
     * @return void
     */
    public function setImageOfLocationUrl($imageOfLocationUrl)
    {
        if ($this->imageOfLocationUrl !== $imageOfLocationUrl) {
            $this->imageOfLocationUrl = $imageOfLocationUrl;
        }
    }
    
    /**
     * Returns the image of location meta.
     *
     * @return array
     */
    public function getImageOfLocationMeta()
    {
        return $this->imageOfLocationMeta;
    }
    
    /**
     * Sets the image of location meta.
     *
     * @param array $imageOfLocationMeta
     *
     * @return void
     */
    public function setImageOfLocationMeta($imageOfLocationMeta = [])
    {
        if ($this->imageOfLocationMeta !== $imageOfLocationMeta) {
            $this->imageOfLocationMeta = $imageOfLocationMeta;
        }
    }
    
    /**
     * Returns the street.
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->street;
    }
    
    /**
     * Sets the street.
     *
     * @param string $street
     *
     * @return void
     */
    public function setStreet($street)
    {
        if ($this->street !== $street) {
            $this->street = isset($street) ? $street : '';
        }
    }
    
    /**
     * Returns the number of street.
     *
     * @return string
     */
    public function getNumberOfStreet()
    {
        return $this->numberOfStreet;
    }
    
    /**
     * Sets the number of street.
     *
     * @param string $numberOfStreet
     *
     * @return void
     */
    public function setNumberOfStreet($numberOfStreet)
    {
        if ($this->numberOfStreet !== $numberOfStreet) {
            $this->numberOfStreet = isset($numberOfStreet) ? $numberOfStreet : '';
        }
    }
    
    /**
     * Returns the zip code.
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->zipCode;
    }
    
    /**
     * Sets the zip code.
     *
     * @param string $zipCode
     *
     * @return void
     */
    public function setZipCode($zipCode)
    {
        if ($this->zipCode !== $zipCode) {
            $this->zipCode = isset($zipCode) ? $zipCode : '';
        }
    }
    
    /**
     * Returns the city.
     *
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
    
    /**
     * Sets the city.
     *
     * @param string $city
     *
     * @return void
     */
    public function setCity($city)
    {
        if ($this->city !== $city) {
            $this->city = isset($city) ? $city : '';
        }
    }
    
    /**
     * Returns the telefon.
     *
     * @return string
     */
    public function getTelefon()
    {
        return $this->telefon;
    }
    
    /**
     * Sets the telefon.
     *
     * @param string $telefon
     *
     * @return void
     */
    public function setTelefon($telefon)
    {
        if ($this->telefon !== $telefon) {
            $this->telefon = isset($telefon) ? $telefon : '';
        }
    }
    
    /**
     * Returns the mobil.
     *
     * @return string
     */
    public function getMobil()
    {
        return $this->mobil;
    }
    
    /**
     * Sets the mobil.
     *
     * @param string $mobil
     *
     * @return void
     */
    public function setMobil($mobil)
    {
        if ($this->mobil !== $mobil) {
            $this->mobil = isset($mobil) ? $mobil : '';
        }
    }
    
    /**
     * Returns the homepage.
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->homepage;
    }
    
    /**
     * Sets the homepage.
     *
     * @param string $homepage
     *
     * @return void
     */
    public function setHomepage($homepage)
    {
        if ($this->homepage !== $homepage) {
            $this->homepage = isset($homepage) ? $homepage : '';
        }
    }
    
    /**
     * Returns the bsag stop.
     *
     * @return string
     */
    public function getBsagStop()
    {
        return $this->bsagStop;
    }
    
    /**
     * Sets the bsag stop.
     *
     * @param string $bsagStop
     *
     * @return void
     */
    public function setBsagStop($bsagStop)
    {
        if ($this->bsagStop !== $bsagStop) {
            $this->bsagStop = isset($bsagStop) ? $bsagStop : '';
        }
    }
    
    /**
     * Returns the tram.
     *
     * @return string
     */
    public function getTram()
    {
        return $this->tram;
    }
    
    /**
     * Sets the tram.
     *
     * @param string $tram
     *
     * @return void
     */
    public function setTram($tram)
    {
        if ($this->tram !== $tram) {
            $this->tram = isset($tram) ? $tram : '';
        }
    }
    
    /**
     * Returns the bus.
     *
     * @return string
     */
    public function getBus()
    {
        return $this->bus;
    }
    
    /**
     * Sets the bus.
     *
     * @param string $bus
     *
     * @return void
     */
    public function setBus($bus)
    {
        if ($this->bus !== $bus) {
            $this->bus = isset($bus) ? $bus : '';
        }
    }
    
    /**
     * Returns the closed for ever.
     *
     * @return boolean
     */
    public function getClosedForEver()
    {
        return $this->closedForEver;
    }
    
    /**
     * Sets the closed for ever.
     *
     * @param boolean $closedForEver
     *
     * @return void
     */
    public function setClosedForEver($closedForEver)
    {
        if (boolval($this->closedForEver) !== boolval($closedForEver)) {
            $this->closedForEver = boolval($closedForEver);
        }
    }
    
    /**
     * Returns the agreement.
     *
     * @return boolean
     */
    public function getAgreement()
    {
        return $this->agreement;
    }
    
    /**
     * Sets the agreement.
     *
     * @param boolean $agreement
     *
     * @return void
     */
    public function setAgreement($agreement)
    {
        if (boolval($this->agreement) !== boolval($agreement)) {
            $this->agreement = boolval($agreement);
        }
    }
    
    /**
     * Returns the unclear times.
     *
     * @return boolean
     */
    public function getUnclearTimes()
    {
        return $this->unclearTimes;
    }
    
    /**
     * Sets the unclear times.
     *
     * @param boolean $unclearTimes
     *
     * @return void
     */
    public function setUnclearTimes($unclearTimes)
    {
        if (boolval($this->unclearTimes) !== boolval($unclearTimes)) {
            $this->unclearTimes = boolval($unclearTimes);
        }
    }
    
    /**
     * Returns the opening hours.
     *
     * @return text
     */
    public function getOpeningHours()
    {
        return $this->openingHours;
    }
    
    /**
     * Sets the opening hours.
     *
     * @param text $openingHours
     *
     * @return void
     */
    public function setOpeningHours($openingHours)
    {
        if ($this->openingHours !== $openingHours) {
            $this->openingHours = isset($openingHours) ? $openingHours : '';
        }
    }
    
    /**
     * Returns the closed on monday.
     *
     * @return boolean
     */
    public function getClosedOnMonday()
    {
        return $this->closedOnMonday;
    }
    
    /**
     * Sets the closed on monday.
     *
     * @param boolean $closedOnMonday
     *
     * @return void
     */
    public function setClosedOnMonday($closedOnMonday)
    {
        if (boolval($this->closedOnMonday) !== boolval($closedOnMonday)) {
            $this->closedOnMonday = boolval($closedOnMonday);
        }
    }
    
    /**
     * Returns the start on monday.
     *
     * @return time
     */
    public function getStartOnMonday()
    {
        return $this->startOnMonday;
    }
    
    /**
     * Sets the start on monday.
     *
     * @param time $startOnMonday
     *
     * @return void
     */
    public function setStartOnMonday($startOnMonday)
    {
        if ($this->startOnMonday !== $startOnMonday) {
            if (is_object($startOnMonday) && $startOnMonday instanceOf \DateTime) {
                $this->startOnMonday = $startOnMonday;
            } elseif (null === $startOnMonday || empty($startOnMonday)) {
                $this->startOnMonday = null;
            } else {
                $this->startOnMonday = new \DateTime($startOnMonday);
            }
        }
    }
    
    /**
     * Returns the end on monday.
     *
     * @return time
     */
    public function getEndOnMonday()
    {
        return $this->endOnMonday;
    }
    
    /**
     * Sets the end on monday.
     *
     * @param time $endOnMonday
     *
     * @return void
     */
    public function setEndOnMonday($endOnMonday)
    {
        if ($this->endOnMonday !== $endOnMonday) {
            if (is_object($endOnMonday) && $endOnMonday instanceOf \DateTime) {
                $this->endOnMonday = $endOnMonday;
            } elseif (null === $endOnMonday || empty($endOnMonday)) {
                $this->endOnMonday = null;
            } else {
                $this->endOnMonday = new \DateTime($endOnMonday);
            }
        }
    }
    
    /**
     * Returns the start 2 on monday.
     *
     * @return time
     */
    public function getStart2OnMonday()
    {
        return $this->start2OnMonday;
    }
    
    /**
     * Sets the start 2 on monday.
     *
     * @param time $start2OnMonday
     *
     * @return void
     */
    public function setStart2OnMonday($start2OnMonday)
    {
        if ($this->start2OnMonday !== $start2OnMonday) {
            if (is_object($start2OnMonday) && $start2OnMonday instanceOf \DateTime) {
                $this->start2OnMonday = $start2OnMonday;
            } elseif (null === $start2OnMonday || empty($start2OnMonday)) {
                $this->start2OnMonday = null;
            } else {
                $this->start2OnMonday = new \DateTime($start2OnMonday);
            }
        }
    }
    
    /**
     * Returns the end 2 on monday.
     *
     * @return time
     */
    public function getEnd2OnMonday()
    {
        return $this->end2OnMonday;
    }
    
    /**
     * Sets the end 2 on monday.
     *
     * @param time $end2OnMonday
     *
     * @return void
     */
    public function setEnd2OnMonday($end2OnMonday)
    {
        if ($this->end2OnMonday !== $end2OnMonday) {
            if (is_object($end2OnMonday) && $end2OnMonday instanceOf \DateTime) {
                $this->end2OnMonday = $end2OnMonday;
            } elseif (null === $end2OnMonday || empty($end2OnMonday)) {
                $this->end2OnMonday = null;
            } else {
                $this->end2OnMonday = new \DateTime($end2OnMonday);
            }
        }
    }
    
    /**
     * Returns the closed on tuesday.
     *
     * @return boolean
     */
    public function getClosedOnTuesday()
    {
        return $this->closedOnTuesday;
    }
    
    /**
     * Sets the closed on tuesday.
     *
     * @param boolean $closedOnTuesday
     *
     * @return void
     */
    public function setClosedOnTuesday($closedOnTuesday)
    {
        if (boolval($this->closedOnTuesday) !== boolval($closedOnTuesday)) {
            $this->closedOnTuesday = boolval($closedOnTuesday);
        }
    }
    
    /**
     * Returns the start on tuesday.
     *
     * @return time
     */
    public function getStartOnTuesday()
    {
        return $this->startOnTuesday;
    }
    
    /**
     * Sets the start on tuesday.
     *
     * @param time $startOnTuesday
     *
     * @return void
     */
    public function setStartOnTuesday($startOnTuesday)
    {
        if ($this->startOnTuesday !== $startOnTuesday) {
            if (is_object($startOnTuesday) && $startOnTuesday instanceOf \DateTime) {
                $this->startOnTuesday = $startOnTuesday;
            } elseif (null === $startOnTuesday || empty($startOnTuesday)) {
                $this->startOnTuesday = null;
            } else {
                $this->startOnTuesday = new \DateTime($startOnTuesday);
            }
        }
    }
    
    /**
     * Returns the end on tuesday.
     *
     * @return time
     */
    public function getEndOnTuesday()
    {
        return $this->endOnTuesday;
    }
    
    /**
     * Sets the end on tuesday.
     *
     * @param time $endOnTuesday
     *
     * @return void
     */
    public function setEndOnTuesday($endOnTuesday)
    {
        if ($this->endOnTuesday !== $endOnTuesday) {
            if (is_object($endOnTuesday) && $endOnTuesday instanceOf \DateTime) {
                $this->endOnTuesday = $endOnTuesday;
            } elseif (null === $endOnTuesday || empty($endOnTuesday)) {
                $this->endOnTuesday = null;
            } else {
                $this->endOnTuesday = new \DateTime($endOnTuesday);
            }
        }
    }
    
    /**
     * Returns the start 2 on tuesday.
     *
     * @return time
     */
    public function getStart2OnTuesday()
    {
        return $this->start2OnTuesday;
    }
    
    /**
     * Sets the start 2 on tuesday.
     *
     * @param time $start2OnTuesday
     *
     * @return void
     */
    public function setStart2OnTuesday($start2OnTuesday)
    {
        if ($this->start2OnTuesday !== $start2OnTuesday) {
            if (is_object($start2OnTuesday) && $start2OnTuesday instanceOf \DateTime) {
                $this->start2OnTuesday = $start2OnTuesday;
            } elseif (null === $start2OnTuesday || empty($start2OnTuesday)) {
                $this->start2OnTuesday = null;
            } else {
                $this->start2OnTuesday = new \DateTime($start2OnTuesday);
            }
        }
    }
    
    /**
     * Returns the end 2 on tuesday.
     *
     * @return time
     */
    public function getEnd2OnTuesday()
    {
        return $this->end2OnTuesday;
    }
    
    /**
     * Sets the end 2 on tuesday.
     *
     * @param time $end2OnTuesday
     *
     * @return void
     */
    public function setEnd2OnTuesday($end2OnTuesday)
    {
        if ($this->end2OnTuesday !== $end2OnTuesday) {
            if (is_object($end2OnTuesday) && $end2OnTuesday instanceOf \DateTime) {
                $this->end2OnTuesday = $end2OnTuesday;
            } elseif (null === $end2OnTuesday || empty($end2OnTuesday)) {
                $this->end2OnTuesday = null;
            } else {
                $this->end2OnTuesday = new \DateTime($end2OnTuesday);
            }
        }
    }
    
    /**
     * Returns the closed on wednesday.
     *
     * @return boolean
     */
    public function getClosedOnWednesday()
    {
        return $this->closedOnWednesday;
    }
    
    /**
     * Sets the closed on wednesday.
     *
     * @param boolean $closedOnWednesday
     *
     * @return void
     */
    public function setClosedOnWednesday($closedOnWednesday)
    {
        if (boolval($this->closedOnWednesday) !== boolval($closedOnWednesday)) {
            $this->closedOnWednesday = boolval($closedOnWednesday);
        }
    }
    
    /**
     * Returns the start on wednesday.
     *
     * @return time
     */
    public function getStartOnWednesday()
    {
        return $this->startOnWednesday;
    }
    
    /**
     * Sets the start on wednesday.
     *
     * @param time $startOnWednesday
     *
     * @return void
     */
    public function setStartOnWednesday($startOnWednesday)
    {
        if ($this->startOnWednesday !== $startOnWednesday) {
            if (is_object($startOnWednesday) && $startOnWednesday instanceOf \DateTime) {
                $this->startOnWednesday = $startOnWednesday;
            } elseif (null === $startOnWednesday || empty($startOnWednesday)) {
                $this->startOnWednesday = null;
            } else {
                $this->startOnWednesday = new \DateTime($startOnWednesday);
            }
        }
    }
    
    /**
     * Returns the end on wednesday.
     *
     * @return time
     */
    public function getEndOnWednesday()
    {
        return $this->endOnWednesday;
    }
    
    /**
     * Sets the end on wednesday.
     *
     * @param time $endOnWednesday
     *
     * @return void
     */
    public function setEndOnWednesday($endOnWednesday)
    {
        if ($this->endOnWednesday !== $endOnWednesday) {
            if (is_object($endOnWednesday) && $endOnWednesday instanceOf \DateTime) {
                $this->endOnWednesday = $endOnWednesday;
            } elseif (null === $endOnWednesday || empty($endOnWednesday)) {
                $this->endOnWednesday = null;
            } else {
                $this->endOnWednesday = new \DateTime($endOnWednesday);
            }
        }
    }
    
    /**
     * Returns the start 2 on wednesday.
     *
     * @return time
     */
    public function getStart2OnWednesday()
    {
        return $this->start2OnWednesday;
    }
    
    /**
     * Sets the start 2 on wednesday.
     *
     * @param time $start2OnWednesday
     *
     * @return void
     */
    public function setStart2OnWednesday($start2OnWednesday)
    {
        if ($this->start2OnWednesday !== $start2OnWednesday) {
            if (is_object($start2OnWednesday) && $start2OnWednesday instanceOf \DateTime) {
                $this->start2OnWednesday = $start2OnWednesday;
            } elseif (null === $start2OnWednesday || empty($start2OnWednesday)) {
                $this->start2OnWednesday = null;
            } else {
                $this->start2OnWednesday = new \DateTime($start2OnWednesday);
            }
        }
    }
    
    /**
     * Returns the end 2 on wednesday.
     *
     * @return time
     */
    public function getEnd2OnWednesday()
    {
        return $this->end2OnWednesday;
    }
    
    /**
     * Sets the end 2 on wednesday.
     *
     * @param time $end2OnWednesday
     *
     * @return void
     */
    public function setEnd2OnWednesday($end2OnWednesday)
    {
        if ($this->end2OnWednesday !== $end2OnWednesday) {
            if (is_object($end2OnWednesday) && $end2OnWednesday instanceOf \DateTime) {
                $this->end2OnWednesday = $end2OnWednesday;
            } elseif (null === $end2OnWednesday || empty($end2OnWednesday)) {
                $this->end2OnWednesday = null;
            } else {
                $this->end2OnWednesday = new \DateTime($end2OnWednesday);
            }
        }
    }
    
    /**
     * Returns the closed on thursday.
     *
     * @return boolean
     */
    public function getClosedOnThursday()
    {
        return $this->closedOnThursday;
    }
    
    /**
     * Sets the closed on thursday.
     *
     * @param boolean $closedOnThursday
     *
     * @return void
     */
    public function setClosedOnThursday($closedOnThursday)
    {
        if (boolval($this->closedOnThursday) !== boolval($closedOnThursday)) {
            $this->closedOnThursday = boolval($closedOnThursday);
        }
    }
    
    /**
     * Returns the start on thursday.
     *
     * @return time
     */
    public function getStartOnThursday()
    {
        return $this->startOnThursday;
    }
    
    /**
     * Sets the start on thursday.
     *
     * @param time $startOnThursday
     *
     * @return void
     */
    public function setStartOnThursday($startOnThursday)
    {
        if ($this->startOnThursday !== $startOnThursday) {
            if (is_object($startOnThursday) && $startOnThursday instanceOf \DateTime) {
                $this->startOnThursday = $startOnThursday;
            } elseif (null === $startOnThursday || empty($startOnThursday)) {
                $this->startOnThursday = null;
            } else {
                $this->startOnThursday = new \DateTime($startOnThursday);
            }
        }
    }
    
    /**
     * Returns the end on thursday.
     *
     * @return time
     */
    public function getEndOnThursday()
    {
        return $this->endOnThursday;
    }
    
    /**
     * Sets the end on thursday.
     *
     * @param time $endOnThursday
     *
     * @return void
     */
    public function setEndOnThursday($endOnThursday)
    {
        if ($this->endOnThursday !== $endOnThursday) {
            if (is_object($endOnThursday) && $endOnThursday instanceOf \DateTime) {
                $this->endOnThursday = $endOnThursday;
            } elseif (null === $endOnThursday || empty($endOnThursday)) {
                $this->endOnThursday = null;
            } else {
                $this->endOnThursday = new \DateTime($endOnThursday);
            }
        }
    }
    
    /**
     * Returns the start 2 on thursday.
     *
     * @return time
     */
    public function getStart2OnThursday()
    {
        return $this->start2OnThursday;
    }
    
    /**
     * Sets the start 2 on thursday.
     *
     * @param time $start2OnThursday
     *
     * @return void
     */
    public function setStart2OnThursday($start2OnThursday)
    {
        if ($this->start2OnThursday !== $start2OnThursday) {
            if (is_object($start2OnThursday) && $start2OnThursday instanceOf \DateTime) {
                $this->start2OnThursday = $start2OnThursday;
            } elseif (null === $start2OnThursday || empty($start2OnThursday)) {
                $this->start2OnThursday = null;
            } else {
                $this->start2OnThursday = new \DateTime($start2OnThursday);
            }
        }
    }
    
    /**
     * Returns the end 2 on thursday.
     *
     * @return time
     */
    public function getEnd2OnThursday()
    {
        return $this->end2OnThursday;
    }
    
    /**
     * Sets the end 2 on thursday.
     *
     * @param time $end2OnThursday
     *
     * @return void
     */
    public function setEnd2OnThursday($end2OnThursday)
    {
        if ($this->end2OnThursday !== $end2OnThursday) {
            if (is_object($end2OnThursday) && $end2OnThursday instanceOf \DateTime) {
                $this->end2OnThursday = $end2OnThursday;
            } elseif (null === $end2OnThursday || empty($end2OnThursday)) {
                $this->end2OnThursday = null;
            } else {
                $this->end2OnThursday = new \DateTime($end2OnThursday);
            }
        }
    }
    
    /**
     * Returns the closed on friday.
     *
     * @return boolean
     */
    public function getClosedOnFriday()
    {
        return $this->closedOnFriday;
    }
    
    /**
     * Sets the closed on friday.
     *
     * @param boolean $closedOnFriday
     *
     * @return void
     */
    public function setClosedOnFriday($closedOnFriday)
    {
        if (boolval($this->closedOnFriday) !== boolval($closedOnFriday)) {
            $this->closedOnFriday = boolval($closedOnFriday);
        }
    }
    
    /**
     * Returns the start on friday.
     *
     * @return time
     */
    public function getStartOnFriday()
    {
        return $this->startOnFriday;
    }
    
    /**
     * Sets the start on friday.
     *
     * @param time $startOnFriday
     *
     * @return void
     */
    public function setStartOnFriday($startOnFriday)
    {
        if ($this->startOnFriday !== $startOnFriday) {
            if (is_object($startOnFriday) && $startOnFriday instanceOf \DateTime) {
                $this->startOnFriday = $startOnFriday;
            } elseif (null === $startOnFriday || empty($startOnFriday)) {
                $this->startOnFriday = null;
            } else {
                $this->startOnFriday = new \DateTime($startOnFriday);
            }
        }
    }
    
    /**
     * Returns the end on friday.
     *
     * @return time
     */
    public function getEndOnFriday()
    {
        return $this->endOnFriday;
    }
    
    /**
     * Sets the end on friday.
     *
     * @param time $endOnFriday
     *
     * @return void
     */
    public function setEndOnFriday($endOnFriday)
    {
        if ($this->endOnFriday !== $endOnFriday) {
            if (is_object($endOnFriday) && $endOnFriday instanceOf \DateTime) {
                $this->endOnFriday = $endOnFriday;
            } elseif (null === $endOnFriday || empty($endOnFriday)) {
                $this->endOnFriday = null;
            } else {
                $this->endOnFriday = new \DateTime($endOnFriday);
            }
        }
    }
    
    /**
     * Returns the start 2 on friday.
     *
     * @return time
     */
    public function getStart2OnFriday()
    {
        return $this->start2OnFriday;
    }
    
    /**
     * Sets the start 2 on friday.
     *
     * @param time $start2OnFriday
     *
     * @return void
     */
    public function setStart2OnFriday($start2OnFriday)
    {
        if ($this->start2OnFriday !== $start2OnFriday) {
            if (is_object($start2OnFriday) && $start2OnFriday instanceOf \DateTime) {
                $this->start2OnFriday = $start2OnFriday;
            } elseif (null === $start2OnFriday || empty($start2OnFriday)) {
                $this->start2OnFriday = null;
            } else {
                $this->start2OnFriday = new \DateTime($start2OnFriday);
            }
        }
    }
    
    /**
     * Returns the end 2 on friday.
     *
     * @return time
     */
    public function getEnd2OnFriday()
    {
        return $this->end2OnFriday;
    }
    
    /**
     * Sets the end 2 on friday.
     *
     * @param time $end2OnFriday
     *
     * @return void
     */
    public function setEnd2OnFriday($end2OnFriday)
    {
        if ($this->end2OnFriday !== $end2OnFriday) {
            if (is_object($end2OnFriday) && $end2OnFriday instanceOf \DateTime) {
                $this->end2OnFriday = $end2OnFriday;
            } elseif (null === $end2OnFriday || empty($end2OnFriday)) {
                $this->end2OnFriday = null;
            } else {
                $this->end2OnFriday = new \DateTime($end2OnFriday);
            }
        }
    }
    
    /**
     * Returns the closed on saturday.
     *
     * @return boolean
     */
    public function getClosedOnSaturday()
    {
        return $this->closedOnSaturday;
    }
    
    /**
     * Sets the closed on saturday.
     *
     * @param boolean $closedOnSaturday
     *
     * @return void
     */
    public function setClosedOnSaturday($closedOnSaturday)
    {
        if (boolval($this->closedOnSaturday) !== boolval($closedOnSaturday)) {
            $this->closedOnSaturday = boolval($closedOnSaturday);
        }
    }
    
    /**
     * Returns the start on saturday.
     *
     * @return time
     */
    public function getStartOnSaturday()
    {
        return $this->startOnSaturday;
    }
    
    /**
     * Sets the start on saturday.
     *
     * @param time $startOnSaturday
     *
     * @return void
     */
    public function setStartOnSaturday($startOnSaturday)
    {
        if ($this->startOnSaturday !== $startOnSaturday) {
            if (is_object($startOnSaturday) && $startOnSaturday instanceOf \DateTime) {
                $this->startOnSaturday = $startOnSaturday;
            } elseif (null === $startOnSaturday || empty($startOnSaturday)) {
                $this->startOnSaturday = null;
            } else {
                $this->startOnSaturday = new \DateTime($startOnSaturday);
            }
        }
    }
    
    /**
     * Returns the end on saturday.
     *
     * @return time
     */
    public function getEndOnSaturday()
    {
        return $this->endOnSaturday;
    }
    
    /**
     * Sets the end on saturday.
     *
     * @param time $endOnSaturday
     *
     * @return void
     */
    public function setEndOnSaturday($endOnSaturday)
    {
        if ($this->endOnSaturday !== $endOnSaturday) {
            if (is_object($endOnSaturday) && $endOnSaturday instanceOf \DateTime) {
                $this->endOnSaturday = $endOnSaturday;
            } elseif (null === $endOnSaturday || empty($endOnSaturday)) {
                $this->endOnSaturday = null;
            } else {
                $this->endOnSaturday = new \DateTime($endOnSaturday);
            }
        }
    }
    
    /**
     * Returns the start 2 on saturday.
     *
     * @return time
     */
    public function getStart2OnSaturday()
    {
        return $this->start2OnSaturday;
    }
    
    /**
     * Sets the start 2 on saturday.
     *
     * @param time $start2OnSaturday
     *
     * @return void
     */
    public function setStart2OnSaturday($start2OnSaturday)
    {
        if ($this->start2OnSaturday !== $start2OnSaturday) {
            if (is_object($start2OnSaturday) && $start2OnSaturday instanceOf \DateTime) {
                $this->start2OnSaturday = $start2OnSaturday;
            } elseif (null === $start2OnSaturday || empty($start2OnSaturday)) {
                $this->start2OnSaturday = null;
            } else {
                $this->start2OnSaturday = new \DateTime($start2OnSaturday);
            }
        }
    }
    
    /**
     * Returns the end 2 on saturday.
     *
     * @return time
     */
    public function getEnd2OnSaturday()
    {
        return $this->end2OnSaturday;
    }
    
    /**
     * Sets the end 2 on saturday.
     *
     * @param time $end2OnSaturday
     *
     * @return void
     */
    public function setEnd2OnSaturday($end2OnSaturday)
    {
        if ($this->end2OnSaturday !== $end2OnSaturday) {
            if (is_object($end2OnSaturday) && $end2OnSaturday instanceOf \DateTime) {
                $this->end2OnSaturday = $end2OnSaturday;
            } elseif (null === $end2OnSaturday || empty($end2OnSaturday)) {
                $this->end2OnSaturday = null;
            } else {
                $this->end2OnSaturday = new \DateTime($end2OnSaturday);
            }
        }
    }
    
    /**
     * Returns the closed on sunday.
     *
     * @return boolean
     */
    public function getClosedOnSunday()
    {
        return $this->closedOnSunday;
    }
    
    /**
     * Sets the closed on sunday.
     *
     * @param boolean $closedOnSunday
     *
     * @return void
     */
    public function setClosedOnSunday($closedOnSunday)
    {
        if (boolval($this->closedOnSunday) !== boolval($closedOnSunday)) {
            $this->closedOnSunday = boolval($closedOnSunday);
        }
    }
    
    /**
     * Returns the start on sunday.
     *
     * @return time
     */
    public function getStartOnSunday()
    {
        return $this->startOnSunday;
    }
    
    /**
     * Sets the start on sunday.
     *
     * @param time $startOnSunday
     *
     * @return void
     */
    public function setStartOnSunday($startOnSunday)
    {
        if ($this->startOnSunday !== $startOnSunday) {
            if (is_object($startOnSunday) && $startOnSunday instanceOf \DateTime) {
                $this->startOnSunday = $startOnSunday;
            } elseif (null === $startOnSunday || empty($startOnSunday)) {
                $this->startOnSunday = null;
            } else {
                $this->startOnSunday = new \DateTime($startOnSunday);
            }
        }
    }
    
    /**
     * Returns the end on sunday.
     *
     * @return time
     */
    public function getEndOnSunday()
    {
        return $this->endOnSunday;
    }
    
    /**
     * Sets the end on sunday.
     *
     * @param time $endOnSunday
     *
     * @return void
     */
    public function setEndOnSunday($endOnSunday)
    {
        if ($this->endOnSunday !== $endOnSunday) {
            if (is_object($endOnSunday) && $endOnSunday instanceOf \DateTime) {
                $this->endOnSunday = $endOnSunday;
            } elseif (null === $endOnSunday || empty($endOnSunday)) {
                $this->endOnSunday = null;
            } else {
                $this->endOnSunday = new \DateTime($endOnSunday);
            }
        }
    }
    
    /**
     * Returns the start 2 on sunday.
     *
     * @return time
     */
    public function getStart2OnSunday()
    {
        return $this->start2OnSunday;
    }
    
    /**
     * Sets the start 2 on sunday.
     *
     * @param time $start2OnSunday
     *
     * @return void
     */
    public function setStart2OnSunday($start2OnSunday)
    {
        if ($this->start2OnSunday !== $start2OnSunday) {
            if (is_object($start2OnSunday) && $start2OnSunday instanceOf \DateTime) {
                $this->start2OnSunday = $start2OnSunday;
            } elseif (null === $start2OnSunday || empty($start2OnSunday)) {
                $this->start2OnSunday = null;
            } else {
                $this->start2OnSunday = new \DateTime($start2OnSunday);
            }
        }
    }
    
    /**
     * Returns the end 2 on sunday.
     *
     * @return time
     */
    public function getEnd2OnSunday()
    {
        return $this->end2OnSunday;
    }
    
    /**
     * Sets the end 2 on sunday.
     *
     * @param time $end2OnSunday
     *
     * @return void
     */
    public function setEnd2OnSunday($end2OnSunday)
    {
        if ($this->end2OnSunday !== $end2OnSunday) {
            if (is_object($end2OnSunday) && $end2OnSunday instanceOf \DateTime) {
                $this->end2OnSunday = $end2OnSunday;
            } elseif (null === $end2OnSunday || empty($end2OnSunday)) {
                $this->end2OnSunday = null;
            } else {
                $this->end2OnSunday = new \DateTime($end2OnSunday);
            }
        }
    }
    
    /**
     * Returns the owner.
     *
     * @return UserEntity
     */
    public function getOwner()
    {
        return $this->owner;
    }
    
    /**
     * Sets the owner.
     *
     * @param UserEntity $owner
     *
     * @return void
     */
    public function setOwner($owner)
    {
        if ($this->owner !== $owner) {
            $this->owner = $owner;
        }
    }
    
    /**
     * Returns the admin 1.
     *
     * @return UserEntity
     */
    public function getAdmin1()
    {
        return $this->admin1;
    }
    
    /**
     * Sets the admin 1.
     *
     * @param UserEntity $admin1
     *
     * @return void
     */
    public function setAdmin1($admin1)
    {
        if ($this->admin1 !== $admin1) {
            $this->admin1 = $admin1;
        }
    }
    
    /**
     * Returns the admin 2.
     *
     * @return UserEntity
     */
    public function getAdmin2()
    {
        return $this->admin2;
    }
    
    /**
     * Sets the admin 2.
     *
     * @param UserEntity $admin2
     *
     * @return void
     */
    public function setAdmin2($admin2)
    {
        if ($this->admin2 !== $admin2) {
            $this->admin2 = $admin2;
        }
    }
    
    /**
     * Returns the part of city.
     *
     * @return string
     */
    public function getPartOfCity()
    {
        return $this->partOfCity;
    }
    
    /**
     * Sets the part of city.
     *
     * @param string $partOfCity
     *
     * @return void
     */
    public function setPartOfCity($partOfCity)
    {
        if ($this->partOfCity !== $partOfCity) {
            $this->partOfCity = isset($partOfCity) ? $partOfCity : '';
        }
    }
    
    /**
     * Returns the branch of location.
     *
     * @return string
     */
    public function getBranchOfLocation()
    {
        return $this->branchOfLocation;
    }
    
    /**
     * Sets the branch of location.
     *
     * @param string $branchOfLocation
     *
     * @return void
     */
    public function setBranchOfLocation($branchOfLocation)
    {
        if ($this->branchOfLocation !== $branchOfLocation) {
            $this->branchOfLocation = isset($branchOfLocation) ? $branchOfLocation : '';
        }
    }
    
    /**
     * Returns the slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    /**
     * Sets the slug.
     *
     * @param string $slug
     *
     * @return void
     */
    public function setSlug($slug)
    {
        if ($this->slug != $slug) {
            $this->slug = $slug;
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        if ($this->locale != $locale) {
            $this->locale = $locale;
        }
    }
    
    
    /**
     * Returns the images of location.
     *
     * @return \MU\YourCityModule\Entity\ImageOfLocationEntity[]
     */
    public function getImagesOfLocation()
    {
        return $this->imagesOfLocation;
    }
    
    /**
     * Sets the images of location.
     *
     * @param \MU\YourCityModule\Entity\ImageOfLocationEntity[] $imagesOfLocation
     *
     * @return void
     */
    public function setImagesOfLocation($imagesOfLocation)
    {
        foreach ($imagesOfLocation as $imageOfLocationSingle) {
            $this->addImagesOfLocation($imageOfLocationSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\ImageOfLocationEntity to the list of images of location.
     *
     * @param \MU\YourCityModule\Entity\ImageOfLocationEntity $imageOfLocation The instance to be added to the collection
     *
     * @return void
     */
    public function addImagesOfLocation(\MU\YourCityModule\Entity\ImageOfLocationEntity $imageOfLocation)
    {
        $this->imagesOfLocation->add($imageOfLocation);
        $imageOfLocation->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\ImageOfLocationEntity from the list of images of location.
     *
     * @param \MU\YourCityModule\Entity\ImageOfLocationEntity $imageOfLocation The instance to be removed from the collection
     *
     * @return void
     */
    public function removeImagesOfLocation(\MU\YourCityModule\Entity\ImageOfLocationEntity $imageOfLocation)
    {
        $this->imagesOfLocation->removeElement($imageOfLocation);
        $imageOfLocation->setLocation(null);
    }
    
    /**
     * Returns the files of location.
     *
     * @return \MU\YourCityModule\Entity\FileOfLocationEntity[]
     */
    public function getFilesOfLocation()
    {
        return $this->filesOfLocation;
    }
    
    /**
     * Sets the files of location.
     *
     * @param \MU\YourCityModule\Entity\FileOfLocationEntity[] $filesOfLocation
     *
     * @return void
     */
    public function setFilesOfLocation($filesOfLocation)
    {
        foreach ($filesOfLocation as $fileOfLocationSingle) {
            $this->addFilesOfLocation($fileOfLocationSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\FileOfLocationEntity to the list of files of location.
     *
     * @param \MU\YourCityModule\Entity\FileOfLocationEntity $fileOfLocation The instance to be added to the collection
     *
     * @return void
     */
    public function addFilesOfLocation(\MU\YourCityModule\Entity\FileOfLocationEntity $fileOfLocation)
    {
        $this->filesOfLocation->add($fileOfLocation);
        $fileOfLocation->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\FileOfLocationEntity from the list of files of location.
     *
     * @param \MU\YourCityModule\Entity\FileOfLocationEntity $fileOfLocation The instance to be removed from the collection
     *
     * @return void
     */
    public function removeFilesOfLocation(\MU\YourCityModule\Entity\FileOfLocationEntity $fileOfLocation)
    {
        $this->filesOfLocation->removeElement($fileOfLocation);
        $fileOfLocation->setLocation(null);
    }
    
    /**
     * Returns the offers.
     *
     * @return \MU\YourCityModule\Entity\OfferEntity[]
     */
    public function getOffers()
    {
        return $this->offers;
    }
    
    /**
     * Sets the offers.
     *
     * @param \MU\YourCityModule\Entity\OfferEntity[] $offers
     *
     * @return void
     */
    public function setOffers($offers)
    {
        foreach ($offers as $offerSingle) {
            $this->addOffers($offerSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\OfferEntity to the list of offers.
     *
     * @param \MU\YourCityModule\Entity\OfferEntity $offer The instance to be added to the collection
     *
     * @return void
     */
    public function addOffers(\MU\YourCityModule\Entity\OfferEntity $offer)
    {
        $this->offers->add($offer);
        $offer->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\OfferEntity from the list of offers.
     *
     * @param \MU\YourCityModule\Entity\OfferEntity $offer The instance to be removed from the collection
     *
     * @return void
     */
    public function removeOffers(\MU\YourCityModule\Entity\OfferEntity $offer)
    {
        $this->offers->removeElement($offer);
        $offer->setLocation(null);
    }
    
    /**
     * Returns the menu of location.
     *
     * @return \MU\YourCityModule\Entity\MenuOfLocationEntity[]
     */
    public function getMenuOfLocation()
    {
        return $this->menuOfLocation;
    }
    
    /**
     * Sets the menu of location.
     *
     * @param \MU\YourCityModule\Entity\MenuOfLocationEntity[] $menuOfLocation
     *
     * @return void
     */
    public function setMenuOfLocation($menuOfLocation)
    {
        foreach ($menuOfLocation as $menuOfLocationSingle) {
            $this->addMenuOfLocation($menuOfLocationSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\MenuOfLocationEntity to the list of menu of location.
     *
     * @param \MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation The instance to be added to the collection
     *
     * @return void
     */
    public function addMenuOfLocation(\MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation)
    {
        $this->menuOfLocation->add($menuOfLocation);
        $menuOfLocation->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\MenuOfLocationEntity from the list of menu of location.
     *
     * @param \MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation The instance to be removed from the collection
     *
     * @return void
     */
    public function removeMenuOfLocation(\MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation)
    {
        $this->menuOfLocation->removeElement($menuOfLocation);
        $menuOfLocation->setLocation(null);
    }
    
    /**
     * Returns the events.
     *
     * @return \MU\YourCityModule\Entity\EventEntity[]
     */
    public function getEvents()
    {
        return $this->events;
    }
    
    /**
     * Sets the events.
     *
     * @param \MU\YourCityModule\Entity\EventEntity[] $events
     *
     * @return void
     */
    public function setEvents($events)
    {
        foreach ($events as $eventSingle) {
            $this->addEvents($eventSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\EventEntity to the list of events.
     *
     * @param \MU\YourCityModule\Entity\EventEntity $event The instance to be added to the collection
     *
     * @return void
     */
    public function addEvents(\MU\YourCityModule\Entity\EventEntity $event)
    {
        $this->events->add($event);
        $event->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\EventEntity from the list of events.
     *
     * @param \MU\YourCityModule\Entity\EventEntity $event The instance to be removed from the collection
     *
     * @return void
     */
    public function removeEvents(\MU\YourCityModule\Entity\EventEntity $event)
    {
        $this->events->removeElement($event);
        $event->setLocation(null);
    }
    
    /**
     * Returns the products.
     *
     * @return \MU\YourCityModule\Entity\ProductEntity[]
     */
    public function getProducts()
    {
        return $this->products;
    }
    
    /**
     * Sets the products.
     *
     * @param \MU\YourCityModule\Entity\ProductEntity[] $products
     *
     * @return void
     */
    public function setProducts($products)
    {
        foreach ($products as $productSingle) {
            $this->addProducts($productSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\ProductEntity to the list of products.
     *
     * @param \MU\YourCityModule\Entity\ProductEntity $product The instance to be added to the collection
     *
     * @return void
     */
    public function addProducts(\MU\YourCityModule\Entity\ProductEntity $product)
    {
        $this->products->add($product);
        $product->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\ProductEntity from the list of products.
     *
     * @param \MU\YourCityModule\Entity\ProductEntity $product The instance to be removed from the collection
     *
     * @return void
     */
    public function removeProducts(\MU\YourCityModule\Entity\ProductEntity $product)
    {
        $this->products->removeElement($product);
        $product->setLocation(null);
    }
    
    /**
     * Returns the dishes.
     *
     * @return \MU\YourCityModule\Entity\DishEntity[]
     */
    public function getDishes()
    {
        return $this->dishes;
    }
    
    /**
     * Sets the dishes.
     *
     * @param \MU\YourCityModule\Entity\DishEntity[] $dishes
     *
     * @return void
     */
    public function setDishes($dishes)
    {
        foreach ($dishes as $dishSingle) {
            $this->addDishes($dishSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\DishEntity to the list of dishes.
     *
     * @param \MU\YourCityModule\Entity\DishEntity $dish The instance to be added to the collection
     *
     * @return void
     */
    public function addDishes(\MU\YourCityModule\Entity\DishEntity $dish)
    {
        $this->dishes->add($dish);
        $dish->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\DishEntity from the list of dishes.
     *
     * @param \MU\YourCityModule\Entity\DishEntity $dish The instance to be removed from the collection
     *
     * @return void
     */
    public function removeDishes(\MU\YourCityModule\Entity\DishEntity $dish)
    {
        $this->dishes->removeElement($dish);
        $dish->setLocation(null);
    }
    
    /**
     * Returns the specials of location.
     *
     * @return \MU\YourCityModule\Entity\SpecialOfLocationEntity[]
     */
    public function getSpecialsOfLocation()
    {
        return $this->specialsOfLocation;
    }
    
    /**
     * Sets the specials of location.
     *
     * @param \MU\YourCityModule\Entity\SpecialOfLocationEntity[] $specialsOfLocation
     *
     * @return void
     */
    public function setSpecialsOfLocation($specialsOfLocation)
    {
        foreach ($specialsOfLocation as $specialOfLocationSingle) {
            $this->addSpecialsOfLocation($specialOfLocationSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\SpecialOfLocationEntity to the list of specials of location.
     *
     * @param \MU\YourCityModule\Entity\SpecialOfLocationEntity $specialOfLocation The instance to be added to the collection
     *
     * @return void
     */
    public function addSpecialsOfLocation(\MU\YourCityModule\Entity\SpecialOfLocationEntity $specialOfLocation)
    {
        $this->specialsOfLocation->add($specialOfLocation);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\SpecialOfLocationEntity from the list of specials of location.
     *
     * @param \MU\YourCityModule\Entity\SpecialOfLocationEntity $specialOfLocation The instance to be removed from the collection
     *
     * @return void
     */
    public function removeSpecialsOfLocation(\MU\YourCityModule\Entity\SpecialOfLocationEntity $specialOfLocation)
    {
        $this->specialsOfLocation->removeElement($specialOfLocation);
    }
    
    /**
     * Returns the services of location.
     *
     * @return \MU\YourCityModule\Entity\ServiceOfLocationEntity[]
     */
    public function getServicesOfLocation()
    {
        return $this->servicesOfLocation;
    }
    
    /**
     * Sets the services of location.
     *
     * @param \MU\YourCityModule\Entity\ServiceOfLocationEntity[] $servicesOfLocation
     *
     * @return void
     */
    public function setServicesOfLocation($servicesOfLocation)
    {
        foreach ($servicesOfLocation as $serviceOfLocationSingle) {
            $this->addServicesOfLocation($serviceOfLocationSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\ServiceOfLocationEntity to the list of services of location.
     *
     * @param \MU\YourCityModule\Entity\ServiceOfLocationEntity $serviceOfLocation The instance to be added to the collection
     *
     * @return void
     */
    public function addServicesOfLocation(\MU\YourCityModule\Entity\ServiceOfLocationEntity $serviceOfLocation)
    {
        $this->servicesOfLocation->add($serviceOfLocation);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\ServiceOfLocationEntity from the list of services of location.
     *
     * @param \MU\YourCityModule\Entity\ServiceOfLocationEntity $serviceOfLocation The instance to be removed from the collection
     *
     * @return void
     */
    public function removeServicesOfLocation(\MU\YourCityModule\Entity\ServiceOfLocationEntity $serviceOfLocation)
    {
        $this->servicesOfLocation->removeElement($serviceOfLocation);
    }
    
    /**
     * Returns the abonnements.
     *
     * @return \MU\YourCityModule\Entity\AbonnementEntity[]
     */
    public function getAbonnements()
    {
        return $this->abonnements;
    }
    
    /**
     * Sets the abonnements.
     *
     * @param \MU\YourCityModule\Entity\AbonnementEntity[] $abonnements
     *
     * @return void
     */
    public function setAbonnements($abonnements)
    {
        foreach ($abonnements as $abonnementSingle) {
            $this->addAbonnements($abonnementSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\AbonnementEntity to the list of abonnements.
     *
     * @param \MU\YourCityModule\Entity\AbonnementEntity $abonnement The instance to be added to the collection
     *
     * @return void
     */
    public function addAbonnements(\MU\YourCityModule\Entity\AbonnementEntity $abonnement)
    {
        $this->abonnements->add($abonnement);
        $abonnement->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\AbonnementEntity from the list of abonnements.
     *
     * @param \MU\YourCityModule\Entity\AbonnementEntity $abonnement The instance to be removed from the collection
     *
     * @return void
     */
    public function removeAbonnements(\MU\YourCityModule\Entity\AbonnementEntity $abonnement)
    {
        $this->abonnements->removeElement($abonnement);
        $abonnement->setLocation(null);
    }
    
    /**
     * Returns the parts of menu.
     *
     * @return \MU\YourCityModule\Entity\PartOfMenuEntity[]
     */
    public function getPartsOfMenu()
    {
        return $this->partsOfMenu;
    }
    
    /**
     * Sets the parts of menu.
     *
     * @param \MU\YourCityModule\Entity\PartOfMenuEntity[] $partsOfMenu
     *
     * @return void
     */
    public function setPartsOfMenu($partsOfMenu)
    {
        foreach ($partsOfMenu as $partOfMenuSingle) {
            $this->addPartsOfMenu($partOfMenuSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\PartOfMenuEntity to the list of parts of menu.
     *
     * @param \MU\YourCityModule\Entity\PartOfMenuEntity $partOfMenu The instance to be added to the collection
     *
     * @return void
     */
    public function addPartsOfMenu(\MU\YourCityModule\Entity\PartOfMenuEntity $partOfMenu)
    {
        $this->partsOfMenu->add($partOfMenu);
        $partOfMenu->setLocation($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\PartOfMenuEntity from the list of parts of menu.
     *
     * @param \MU\YourCityModule\Entity\PartOfMenuEntity $partOfMenu The instance to be removed from the collection
     *
     * @return void
     */
    public function removePartsOfMenu(\MU\YourCityModule\Entity\PartOfMenuEntity $partOfMenu)
    {
        $this->partsOfMenu->removeElement($partOfMenu);
        $partOfMenu->setLocation(null);
    }
    
    
    
    /**
     * Checks whether the owner field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     *
     * @return boolean True if data is valid else false
     */
    public function isOwnerUserValid()
    {
        return null === $this['owner'] || $this['owner'] instanceof UserEntity;
    }
    
    /**
     * Checks whether the admin1 field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     *
     * @return boolean True if data is valid else false
     */
    public function isAdmin1UserValid()
    {
        return null === $this['admin1'] || $this['admin1'] instanceof UserEntity;
    }
    
    /**
     * Checks whether the admin2 field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     *
     * @return boolean True if data is valid else false
     */
    public function isAdmin2UserValid()
    {
        return null === $this['admin2'] || $this['admin2'] instanceof UserEntity;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'slug' => $this->getSlug()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muyourcitymodule.ui_hooks.locations';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Location ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setLogoOfYourLocation(null);
        $this->setLogoOfYourLocationMeta([]);
        $this->setLogoOfYourLocationUrl('');
        $this->setImageOfLocation(null);
        $this->setImageOfLocationMeta([]);
        $this->setImageOfLocationUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
