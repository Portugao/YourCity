<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\YourCityModule\Traits\StandardFieldsTrait;
use MU\YourCityModule\Validator\Constraints as YourCityAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for abonnement entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractAbonnementEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'abonnement';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="abonnement", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * Enter the name of the location, you subscribe to.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $name
     */
    protected $name = 'Abonnement';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showMenus
     */
    protected $showMenus = true;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageForMenus
     */
    protected $sendMessageForMenus = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOffers
     */
    protected $showOffers = true;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageForOffers
     */
    protected $sendMessageForOffers = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showEvents
     */
    protected $showEvents = true;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageForEvents
     */
    protected $sendMessageForEvents = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showProducts
     */
    protected $showProducts = true;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageForProducts
     */
    protected $sendMessageForProducts = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOptionOne
     */
    protected $showOptionOne = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageToOptionOne
     */
    protected $sendMessageToOptionOne = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOptionTwo
     */
    protected $showOptionTwo = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageToOptionTwo
     */
    protected $sendMessageToOptionTwo = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOptionThree
     */
    protected $showOptionThree = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMessageToOptionThree
     */
    protected $sendMessageToOptionThree = false;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $positionOfAbo
     */
    protected $positionOfAbo = 0;
    
    
    /**
     * Bidirectional - Many abonnements [abonnements] are linked by one location [location] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\YourCityModule\Entity\LocationEntity", inversedBy="abonnements")
     * @ORM\JoinTable(name="mu_yourcity_location",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @Assert\NotNull(message="Choosing a location is required.")
     * @Assert\Type(type="MU\YourCityModule\Entity\LocationEntity")
     * @var \MU\YourCityModule\Entity\LocationEntity $location
     */
    protected $location;
    
    
    /**
     * AbonnementEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the show menus.
     *
     * @return boolean
     */
    public function getShowMenus()
    {
        return $this->showMenus;
    }
    
    /**
     * Sets the show menus.
     *
     * @param boolean $showMenus
     *
     * @return void
     */
    public function setShowMenus($showMenus)
    {
        if (boolval($this->showMenus) !== boolval($showMenus)) {
            $this->showMenus = boolval($showMenus);
        }
    }
    
    /**
     * Returns the send message for menus.
     *
     * @return boolean
     */
    public function getSendMessageForMenus()
    {
        return $this->sendMessageForMenus;
    }
    
    /**
     * Sets the send message for menus.
     *
     * @param boolean $sendMessageForMenus
     *
     * @return void
     */
    public function setSendMessageForMenus($sendMessageForMenus)
    {
        if (boolval($this->sendMessageForMenus) !== boolval($sendMessageForMenus)) {
            $this->sendMessageForMenus = boolval($sendMessageForMenus);
        }
    }
    
    /**
     * Returns the show offers.
     *
     * @return boolean
     */
    public function getShowOffers()
    {
        return $this->showOffers;
    }
    
    /**
     * Sets the show offers.
     *
     * @param boolean $showOffers
     *
     * @return void
     */
    public function setShowOffers($showOffers)
    {
        if (boolval($this->showOffers) !== boolval($showOffers)) {
            $this->showOffers = boolval($showOffers);
        }
    }
    
    /**
     * Returns the send message for offers.
     *
     * @return boolean
     */
    public function getSendMessageForOffers()
    {
        return $this->sendMessageForOffers;
    }
    
    /**
     * Sets the send message for offers.
     *
     * @param boolean $sendMessageForOffers
     *
     * @return void
     */
    public function setSendMessageForOffers($sendMessageForOffers)
    {
        if (boolval($this->sendMessageForOffers) !== boolval($sendMessageForOffers)) {
            $this->sendMessageForOffers = boolval($sendMessageForOffers);
        }
    }
    
    /**
     * Returns the show events.
     *
     * @return boolean
     */
    public function getShowEvents()
    {
        return $this->showEvents;
    }
    
    /**
     * Sets the show events.
     *
     * @param boolean $showEvents
     *
     * @return void
     */
    public function setShowEvents($showEvents)
    {
        if (boolval($this->showEvents) !== boolval($showEvents)) {
            $this->showEvents = boolval($showEvents);
        }
    }
    
    /**
     * Returns the send message for events.
     *
     * @return boolean
     */
    public function getSendMessageForEvents()
    {
        return $this->sendMessageForEvents;
    }
    
    /**
     * Sets the send message for events.
     *
     * @param boolean $sendMessageForEvents
     *
     * @return void
     */
    public function setSendMessageForEvents($sendMessageForEvents)
    {
        if (boolval($this->sendMessageForEvents) !== boolval($sendMessageForEvents)) {
            $this->sendMessageForEvents = boolval($sendMessageForEvents);
        }
    }
    
    /**
     * Returns the show products.
     *
     * @return boolean
     */
    public function getShowProducts()
    {
        return $this->showProducts;
    }
    
    /**
     * Sets the show products.
     *
     * @param boolean $showProducts
     *
     * @return void
     */
    public function setShowProducts($showProducts)
    {
        if (boolval($this->showProducts) !== boolval($showProducts)) {
            $this->showProducts = boolval($showProducts);
        }
    }
    
    /**
     * Returns the send message for products.
     *
     * @return boolean
     */
    public function getSendMessageForProducts()
    {
        return $this->sendMessageForProducts;
    }
    
    /**
     * Sets the send message for products.
     *
     * @param boolean $sendMessageForProducts
     *
     * @return void
     */
    public function setSendMessageForProducts($sendMessageForProducts)
    {
        if (boolval($this->sendMessageForProducts) !== boolval($sendMessageForProducts)) {
            $this->sendMessageForProducts = boolval($sendMessageForProducts);
        }
    }
    
    /**
     * Returns the show option one.
     *
     * @return boolean
     */
    public function getShowOptionOne()
    {
        return $this->showOptionOne;
    }
    
    /**
     * Sets the show option one.
     *
     * @param boolean $showOptionOne
     *
     * @return void
     */
    public function setShowOptionOne($showOptionOne)
    {
        if (boolval($this->showOptionOne) !== boolval($showOptionOne)) {
            $this->showOptionOne = boolval($showOptionOne);
        }
    }
    
    /**
     * Returns the send message to option one.
     *
     * @return boolean
     */
    public function getSendMessageToOptionOne()
    {
        return $this->sendMessageToOptionOne;
    }
    
    /**
     * Sets the send message to option one.
     *
     * @param boolean $sendMessageToOptionOne
     *
     * @return void
     */
    public function setSendMessageToOptionOne($sendMessageToOptionOne)
    {
        if (boolval($this->sendMessageToOptionOne) !== boolval($sendMessageToOptionOne)) {
            $this->sendMessageToOptionOne = boolval($sendMessageToOptionOne);
        }
    }
    
    /**
     * Returns the show option two.
     *
     * @return boolean
     */
    public function getShowOptionTwo()
    {
        return $this->showOptionTwo;
    }
    
    /**
     * Sets the show option two.
     *
     * @param boolean $showOptionTwo
     *
     * @return void
     */
    public function setShowOptionTwo($showOptionTwo)
    {
        if (boolval($this->showOptionTwo) !== boolval($showOptionTwo)) {
            $this->showOptionTwo = boolval($showOptionTwo);
        }
    }
    
    /**
     * Returns the send message to option two.
     *
     * @return boolean
     */
    public function getSendMessageToOptionTwo()
    {
        return $this->sendMessageToOptionTwo;
    }
    
    /**
     * Sets the send message to option two.
     *
     * @param boolean $sendMessageToOptionTwo
     *
     * @return void
     */
    public function setSendMessageToOptionTwo($sendMessageToOptionTwo)
    {
        if (boolval($this->sendMessageToOptionTwo) !== boolval($sendMessageToOptionTwo)) {
            $this->sendMessageToOptionTwo = boolval($sendMessageToOptionTwo);
        }
    }
    
    /**
     * Returns the show option three.
     *
     * @return boolean
     */
    public function getShowOptionThree()
    {
        return $this->showOptionThree;
    }
    
    /**
     * Sets the show option three.
     *
     * @param boolean $showOptionThree
     *
     * @return void
     */
    public function setShowOptionThree($showOptionThree)
    {
        if (boolval($this->showOptionThree) !== boolval($showOptionThree)) {
            $this->showOptionThree = boolval($showOptionThree);
        }
    }
    
    /**
     * Returns the send message to option three.
     *
     * @return boolean
     */
    public function getSendMessageToOptionThree()
    {
        return $this->sendMessageToOptionThree;
    }
    
    /**
     * Sets the send message to option three.
     *
     * @param boolean $sendMessageToOptionThree
     *
     * @return void
     */
    public function setSendMessageToOptionThree($sendMessageToOptionThree)
    {
        if (boolval($this->sendMessageToOptionThree) !== boolval($sendMessageToOptionThree)) {
            $this->sendMessageToOptionThree = boolval($sendMessageToOptionThree);
        }
    }
    
    /**
     * Returns the position of abo.
     *
     * @return integer
     */
    public function getPositionOfAbo()
    {
        return $this->positionOfAbo;
    }
    
    /**
     * Sets the position of abo.
     *
     * @param integer $positionOfAbo
     *
     * @return void
     */
    public function setPositionOfAbo($positionOfAbo)
    {
        if (intval($this->positionOfAbo) !== intval($positionOfAbo)) {
            $this->positionOfAbo = intval($positionOfAbo);
        }
    }
    
    
    /**
     * Returns the location.
     *
     * @return \MU\YourCityModule\Entity\LocationEntity
     */
    public function getLocation()
    {
        return $this->location;
    }
    
    /**
     * Sets the location.
     *
     * @param \MU\YourCityModule\Entity\LocationEntity $location
     *
     * @return void
     */
    public function setLocation($location = null)
    {
        $this->location = $location;
    }
    
    
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muyourcitymodule.ui_hooks.abonnements';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Abonnement ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
