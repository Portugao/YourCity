<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\YourCityModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\YourCityModule\Traits\StandardFieldsTrait;
use MU\YourCityModule\Validator\Constraints as YourCityAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for part of menu entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractPartOfMenuEntity extends EntityAccess implements Translatable
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'partOfMenu';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="partOfMenu", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * For example drinks.
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * Maximum 2000 characters.
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=2000, nullable=true)
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $positionOfPart
     */
    protected $positionOfPart = 0;
    
    /**
     * If you have more than one location, select the correct one!
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @YourCityAssert\ListEntry(entityName="partOfMenu", propertyName="myLocation", multiple=false)
     * @var string $myLocation
     */
    protected $myLocation = '';
    
    
    /**
     * Used locale to override Translation listener's locale.
     * this is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    /**
     * Bidirectional - Many partsOfMenu [parts of menu] are linked by many menusOfLocation [menus of location] (INVERSE SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MU\YourCityModule\Entity\MenuOfLocationEntity", mappedBy="partsOfMenu")
     * @ORM\OrderBy({"name" = "ASC"})
     * @var \MU\YourCityModule\Entity\MenuOfLocationEntity[] $menusOfLocation
     */
    protected $menusOfLocation = null;
    /**
     * Bidirectional - Many partsOfMenu [parts of menu] have many dishes [dishes] (OWNING SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MU\YourCityModule\Entity\DishEntity", inversedBy="partsOfMenu")
     * @ORM\JoinTable(name="mu_yourcity_partofmenu_dish")
     * @ORM\OrderBy({"positionOfDish" = "ASC"})
     * @var \MU\YourCityModule\Entity\DishEntity[] $dishes
     */
    protected $dishes = null;
    
    /**
     * PartOfMenuEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->dishes = new ArrayCollection();
        $this->menusOfLocation = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = $description;
        }
    }
    
    /**
     * Returns the position of part.
     *
     * @return integer
     */
    public function getPositionOfPart()
    {
        return $this->positionOfPart;
    }
    
    /**
     * Sets the position of part.
     *
     * @param integer $positionOfPart
     *
     * @return void
     */
    public function setPositionOfPart($positionOfPart)
    {
        if (intval($this->positionOfPart) !== intval($positionOfPart)) {
            $this->positionOfPart = intval($positionOfPart);
        }
    }
    
    /**
     * Returns the my location.
     *
     * @return string
     */
    public function getMyLocation()
    {
        return $this->myLocation;
    }
    
    /**
     * Sets the my location.
     *
     * @param string $myLocation
     *
     * @return void
     */
    public function setMyLocation($myLocation)
    {
        if ($this->myLocation !== $myLocation) {
            $this->myLocation = isset($myLocation) ? $myLocation : '';
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        if ($this->locale != $locale) {
            $this->locale = $locale;
        }
    }
    
    
    /**
     * Returns the menus of location.
     *
     * @return \MU\YourCityModule\Entity\MenuOfLocationEntity[]
     */
    public function getMenusOfLocation()
    {
        return $this->menusOfLocation;
    }
    
    /**
     * Sets the menus of location.
     *
     * @param \MU\YourCityModule\Entity\MenuOfLocationEntity[] $menusOfLocation
     *
     * @return void
     */
    public function setMenusOfLocation($menusOfLocation)
    {
        foreach ($this->menusOfLocation as $menuOfLocationSingle) {
            $this->removeMenusOfLocation($menuOfLocationSingle);
        }
        foreach ($menusOfLocation as $menuOfLocationSingle) {
            $this->addMenusOfLocation($menuOfLocationSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\MenuOfLocationEntity to the list of menus of location.
     *
     * @param \MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation The instance to be added to the collection
     *
     * @return void
     */
    public function addMenusOfLocation(\MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation)
    {
        $this->menusOfLocation->add($menuOfLocation);
        $menuOfLocation->addPartsOfMenu($this);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\MenuOfLocationEntity from the list of menus of location.
     *
     * @param \MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation The instance to be removed from the collection
     *
     * @return void
     */
    public function removeMenusOfLocation(\MU\YourCityModule\Entity\MenuOfLocationEntity $menuOfLocation)
    {
        $this->menusOfLocation->removeElement($menuOfLocation);
        $menuOfLocation->removePartsOfMenu($this);
    }
    
    /**
     * Returns the dishes.
     *
     * @return \MU\YourCityModule\Entity\DishEntity[]
     */
    public function getDishes()
    {
        return $this->dishes;
    }
    
    /**
     * Sets the dishes.
     *
     * @param \MU\YourCityModule\Entity\DishEntity[] $dishes
     *
     * @return void
     */
    public function setDishes($dishes)
    {
        foreach ($this->dishes as $dishSingle) {
            $this->removeDishes($dishSingle);
        }
        foreach ($dishes as $dishSingle) {
            $this->addDishes($dishSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourCityModule\Entity\DishEntity to the list of dishes.
     *
     * @param \MU\YourCityModule\Entity\DishEntity $dish The instance to be added to the collection
     *
     * @return void
     */
    public function addDishes(\MU\YourCityModule\Entity\DishEntity $dish)
    {
        $this->dishes->add($dish);
    }
    
    /**
     * Removes an instance of \MU\YourCityModule\Entity\DishEntity from the list of dishes.
     *
     * @param \MU\YourCityModule\Entity\DishEntity $dish The instance to be removed from the collection
     *
     * @return void
     */
    public function removeDishes(\MU\YourCityModule\Entity\DishEntity $dish)
    {
        $this->dishes->removeElement($dish);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muyourcitymodule.ui_hooks.partsofmenu';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Part of menu ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
