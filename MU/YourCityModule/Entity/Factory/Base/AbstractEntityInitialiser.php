<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Entity\Factory\Base;

use MU\YourCityModule\Entity\BranchEntity;
use MU\YourCityModule\Entity\LocationEntity;
use MU\YourCityModule\Entity\PartEntity;
use MU\YourCityModule\Entity\ImageOfLocationEntity;
use MU\YourCityModule\Entity\FileOfLocationEntity;
use MU\YourCityModule\Entity\OfferEntity;
use MU\YourCityModule\Entity\MenuOfLocationEntity;
use MU\YourCityModule\Entity\PartOfMenuEntity;
use MU\YourCityModule\Entity\DishEntity;
use MU\YourCityModule\Entity\EventEntity;
use MU\YourCityModule\Entity\ProductEntity;
use MU\YourCityModule\Entity\SpecialOfLocationEntity;
use MU\YourCityModule\Entity\ServiceOfLocationEntity;
use MU\YourCityModule\Entity\AbonnementEntity;
use MU\YourCityModule\Helper\ListEntriesHelper;

/**
 * Entity initialiser class used to dynamically apply default values to newly created entities.
 */
abstract class AbstractEntityInitialiser
{
    /**
     * @var ListEntriesHelper Helper service for managing list entries
     */
    protected $listEntriesHelper;

    /**
     * @var float Default latitude for geographical entities
     */
    protected $defaultLatitude;

    /**
     * @var float Default longitude for geographical entities
     */
    protected $defaultLongitude;

    /**
     * EntityInitialiser constructor.
     *
     * @param ListEntriesHelper $listEntriesHelper Helper service for managing list entries
     * @param float $defaultLatitude Default latitude for geographical entities
     * @param float $defaultLongitude Default longitude for geographical entities
     */
    public function __construct(ListEntriesHelper $listEntriesHelper, $defaultLatitude, $defaultLongitude)
    {
        $this->listEntriesHelper = $listEntriesHelper;
        $this->defaultLatitude = $defaultLatitude;
        $this->defaultLongitude = $defaultLongitude;
    }

    /**
     * Initialises a given branch instance.
     *
     * @param BranchEntity $entity The newly created entity instance
     *
     * @return BranchEntity The updated entity instance
     */
    public function initBranch(BranchEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given location instance.
     *
     * @param LocationEntity $entity The newly created entity instance
     *
     * @return LocationEntity The updated entity instance
     */
    public function initLocation(LocationEntity $entity)
    {

        $entity->setLatitude($this->defaultLatitude);
        $entity->setLongitude($this->defaultLongitude);

        return $entity;
    }

    /**
     * Initialises a given part instance.
     *
     * @param PartEntity $entity The newly created entity instance
     *
     * @return PartEntity The updated entity instance
     */
    public function initPart(PartEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given imageOfLocation instance.
     *
     * @param ImageOfLocationEntity $entity The newly created entity instance
     *
     * @return ImageOfLocationEntity The updated entity instance
     */
    public function initImageOfLocation(ImageOfLocationEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given fileOfLocation instance.
     *
     * @param FileOfLocationEntity $entity The newly created entity instance
     *
     * @return FileOfLocationEntity The updated entity instance
     */
    public function initFileOfLocation(FileOfLocationEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given offer instance.
     *
     * @param OfferEntity $entity The newly created entity instance
     *
     * @return OfferEntity The updated entity instance
     */
    public function initOffer(OfferEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given menuOfLocation instance.
     *
     * @param MenuOfLocationEntity $entity The newly created entity instance
     *
     * @return MenuOfLocationEntity The updated entity instance
     */
    public function initMenuOfLocation(MenuOfLocationEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given partOfMenu instance.
     *
     * @param PartOfMenuEntity $entity The newly created entity instance
     *
     * @return PartOfMenuEntity The updated entity instance
     */
    public function initPartOfMenu(PartOfMenuEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given dish instance.
     *
     * @param DishEntity $entity The newly created entity instance
     *
     * @return DishEntity The updated entity instance
     */
    public function initDish(DishEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given event instance.
     *
     * @param EventEntity $entity The newly created entity instance
     *
     * @return EventEntity The updated entity instance
     */
    public function initEvent(EventEntity $entity)
    {

        $entity->setLatitude($this->defaultLatitude);
        $entity->setLongitude($this->defaultLongitude);

        return $entity;
    }

    /**
     * Initialises a given product instance.
     *
     * @param ProductEntity $entity The newly created entity instance
     *
     * @return ProductEntity The updated entity instance
     */
    public function initProduct(ProductEntity $entity)
    {
        $listEntries = $this->listEntriesHelper->getTodayEntriesForProduct();
        $items = [];
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $items[] = $listEntry['value'];
            }
        }
        $entity->setToday(implode('###', $items));


        return $entity;
    }

    /**
     * Initialises a given specialOfLocation instance.
     *
     * @param SpecialOfLocationEntity $entity The newly created entity instance
     *
     * @return SpecialOfLocationEntity The updated entity instance
     */
    public function initSpecialOfLocation(SpecialOfLocationEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given serviceOfLocation instance.
     *
     * @param ServiceOfLocationEntity $entity The newly created entity instance
     *
     * @return ServiceOfLocationEntity The updated entity instance
     */
    public function initServiceOfLocation(ServiceOfLocationEntity $entity)
    {

        return $entity;
    }

    /**
     * Initialises a given abonnement instance.
     *
     * @param AbonnementEntity $entity The newly created entity instance
     *
     * @return AbonnementEntity The updated entity instance
     */
    public function initAbonnement(AbonnementEntity $entity)
    {

        return $entity;
    }

    /**
     * Returns the list entries helper.
     *
     * @return ListEntriesHelper
     */
    public function getListEntriesHelper()
    {
        return $this->listEntriesHelper;
    }
    
    /**
     * Sets the list entries helper.
     *
     * @param ListEntriesHelper $listEntriesHelper
     *
     * @return void
     */
    public function setListEntriesHelper($listEntriesHelper)
    {
        if ($this->listEntriesHelper != $listEntriesHelper) {
            $this->listEntriesHelper = $listEntriesHelper;
        }
    }
    
}
