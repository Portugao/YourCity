<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Controller\Base;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Zikula\Core\Controller\AbstractController;

/**
 * Config controller base class.
 */
abstract class AbstractImportController extends AbstractController
{
    /**
     * This method takes care of the import.
     *
     * @param Request $request Current request instance
     *
     * @return string Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function importAction(Request $request)
    {
        if (!$this->hasPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }
        
        $form = $this->createForm('MU\YourCityModule\Form\ImportType');
        
        if ($form->handleRequest($request)->isValid()) {
            if ($form->get('save')->isClicked()) {
                $formData = $form->getData();
                foreach (['moderationGroupForLocations'] as $groupFieldName) {
                    $formData[$groupFieldName] = is_object($formData[$groupFieldName]) ? $formData[$groupFieldName]->getGid() : $formData[$groupFieldName];
                }
                $this->setVars($formData);
        
                $this->addFlash('status', $this->__('Done! Module configuration updated.'));
                $userName = $this->get('zikula_users_module.current_user')->get('uname');
                $this->get('logger')->notice('{app}: User {user} updated the configuration.', ['app' => 'MUYourCityModule', 'user' => $userName]);
            } elseif ($form->get('cancel')->isClicked()) {
                $this->addFlash('status', $this->__('Operation cancelled.'));
            }
        
            // redirect to config page again (to show with GET request)
            return $this->redirectToRoute('muyourcitymodule_import_import');
        }
        
        $templateParameters = [
            'form' => $form->createView()
        ];
        
        // render the config form
        return $this->render('@MUYourCityModule/Import/import.html.twig', $templateParameters);
    }
    
    /**
     *
     * Build data array for creating collection
     * @param array $result
     * @return array of values
     */
    private function buildArrayForDatas($module , $result)
    {
    	if ($module == 'Downloads') {
    		$result['title'] = utf8_encode($result['title']);
    		$result['title'] = html_entity_decode($result['title'], ENT_COMPAT);
    		$result['description'] = utf8_encode($result['description']);
    		$data[] = array('id' => $result['cid'],
    				'parent_id' => $result['pid'],
    				'inFrontend' => 1,
    				'name' => $result['title'],
    				'description' => $result['description']);
    	}
    	return $data;
    }
    
    /**
     *
     * Get files of module
     * @param string $module    the module to work with
     *
     * @return an array of files
     */
    private function getDatas()
    {
    	$table = 'clip_pubdata3';
    	//$moduletable = $this->getPraefix(). $table;
    	$connect = $this->getDBConnection();
    	// ask the DB for entries in the module table
    	// handle the access to the module file table
    	// build sql
    	$query = "SELECT * FROM " . $table . " ORDER by id";
    	// prepare the sql query
    	$sql = $connect->query($query);
    	$connect = null;
    	return $sql;
    }
    

    /**
     * Get a connection to DB
     *
     * @return a connection
     */
    private function getDBConnection()
    {
    	//get host, db, user and pw
    	$databases = ServiceUtil::getManager()->getArgument('databases');
    	$connName = Doctrine_Manager::getInstance()->getCurrentConnection()->getName();
    	$host = $databases[$connName]['host'];
    	$dbname = $databases[$connName]['dbname'];
    	$dbuser = $databases[$connName]['user'];
    	$dbpassword = $databases[$connName]['password'];
    	try {
    		$connect = new PDO("mysql:host=$host;dbname=$dbname", $dbuser, $dbpassword);
    	}
    	catch (PDOException $e) {
    		$this->__('Connection to database failed');
    	}
    	if (is_object($connect)) {
    		return $connect;
    	} else {
    		return false;
    	}
    
    }
}
