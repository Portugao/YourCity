<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Helper;

use MU\YourCityModule\Helper\Base\AbstractControllerHelper;


use Zikula\Core\RouteUrl;
use DateUtil;


/**
 * Helper implementation class for controller layer methods.
 */
class ControllerHelper extends AbstractControllerHelper
{    
    /**
     * Processes the parameters for a display action.
     *
     * @param string  $objectType         Name of treated entity type
     * @param array   $templateParameters Template data
     * @param boolean $supportsHooks      Whether hooks are supported or not
     *
     * @return array Enriched template parameters used for creating the response
     */
    public function processDisplayActionParameters($objectType, array $templateParameters = [], $supportsHooks = false)
    {
    	$contextArgs = ['controller' => $objectType, 'action' => 'display'];
    	if (!in_array($objectType, $this->getObjectTypes('controllerAction', $contextArgs))) {
    		throw new Exception($this->__('Error! Invalid object type received.'));
    	}
    
    	if (true === $supportsHooks) {
    		// build RouteUrl instance for display hooks
    		$entity = $templateParameters[$objectType];
    		$urlParameters = $entity->createUrlArgs();
    		$urlParameters['_locale'] = $this->request->getLocale();
    		$templateParameters['currentUrlObject'] = new RouteUrl('muyourcitymodule_' . $objectType . '_' . /*$templateParameters['routeArea'] . */'display', $urlParameters);
    	}
    	
    	$entity = $templateParameters[$objectType];
    	
    	$actualDay = $this->getActualDay();
    	
    	if ($objectType == 'location') {
    		$location = $entity;
    		$location['showHours'] = 'none';
    		if ($location['closedForEver'] == 1) {
    			$location['state'] = 'closedForEver';
    			$location['showHours'] = $this->__('Closed today');
    			//$locations[] = $location;
    		} else {
    			if ($location['agreement'] == 1) {
    				$location['state'] = 'agreement';
    				//$locations[] = $location;
    			} else {
    				if ($location['unclearTimes'] == 1) {
    					$location['state'] = 'unclear';
    					//$locations[] = $location;
    				} else {
    					if ($location['closedOn' . $actualDay] == 1) {
    						$location['state'] = 'closedThisDay';
    						//$locations[] = $location;
    					} else {
    						$location['state'] = $this->checkActualDay($actualDay, $location);
    						$location['showHours'] = $this->checkActualDay($actualDay, $location, 2);
    						//$locations[] = $location;
    					}
    				}
    			}
    		}    		
    	}
    	
    	if ($objectType == 'part' || $objectType == 'branch' || $objectType == 'serviceOfLocation' || $objectType == 'specialOfLocation') {

    		$locations = array();
    		foreach ($entity['locations'] as $location) {
    			$location['showHours'] = 'none';
    			if ($location['closedForEver'] == 1) {
    				$location['state'] = 'closedForEver';
    				$location['showHours'] = $this->__('Closed today');
    				$locations[] = $location;    				
    			} else {
    				if ($location['agreement'] == 1) {
    					$location['state'] = 'agreement';
    					$locations[] = $location;
    				} else {
    					if ($location['unclearTimes'] == 1) {
    						$location['state'] = 'unclear';
    						$locations[] = $location;
    					} else {
    						if ($location['closedOn' . $actualDay] == 1) {
    							$location['state'] = 'closedThisDay';
    							$locations[] = $location;
    						} else {
    							$location['state'] = $this->checkActualDay($actualDay, $location);
    							$location['showHours'] = $this->checkActualDay($actualDay, $location, 2);
    							$locations[] = $location;
    						}
    					}
    				}
    			}
    		}
    		foreach ($templateParameters[$objectType]['locations'] as $i => $value) {
    			unset($templateParameters[$objectType]['locations'][$i]);
    		}
    		//unset($templateParameters[$objectType]['locations']);
    		//$templateParameters[$objectType]['locations'] = array();
    		$templateParameters[$objectType]['locations'] = $locations;
    	} else {
    		if ($objectType == 'location') {
    			$templateParameters[$objectType] = $location;
    		} else {
    		//$templateParameters[$objectType] = $entities;
    		}
    	}
    
    	return $this->addTemplateParameters($objectType, $templateParameters, 'controllerAction', $contextArgs);
    }
    /**
     * 
     * @param string $actualDay
     * @param array $location
     * @param int $kind
     * @return string
     */
    private function checkActualDay($actualDay, $location, $kind = 1) {
    	$startTime = \DateUtil::formatDatetime($location['startOn' . $actualDay], 'timelong');
    	$endTime = \DateUtil::formatDatetime($location['endOn' . $actualDay], 'timelong');
    	$start2Time = \DateUtil::formatDatetime($location['start2On' . $actualDay], 'timelong');
    	$end2Time = \DateUtil::formatDatetime($location['end2On' . $actualDay], 'timelong');
    	
    	$startTimeFine = \DateUtil::formatDatetime($location['startOn' . $actualDay], 'timebrief');
    	$endTimeFine = \DateUtil::formatDatetime($location['endOn' . $actualDay], 'timebrief');
    	$start2TimeFine = \DateUtil::formatDatetime($location['start2On' . $actualDay], 'timebrief');
    	$end2TimeFine = \DateUtil::formatDatetime($location['end2On' . $actualDay], 'timebrief');
    	
    	
		switch ($actualDay) {
			case 'Sunday' :
				$nextDay = 'Monday';
				break;
			case 'Monday' :
				$nextDay = 'Tuesday';
				break;
			case 'Tuesday' :
				$nextDay = 'Wednesday';
				break;
			case 'Wednesday' :
				$nextDay = 'Thursday';
				break;
			case 'Thursday' :
				$nextDay = 'Friday';
				break;
			case 'Friday' :
				$nextDay = 'Saturday';
				break;
			case 'Saturday' :
				$nextDay = 'Sunday';
				break;				
		}
		
		$nextStartTime = \DateUtil::formatDatetime($location['startOn' . $nextDay], 'timelong');
		$nextEndTime = \DateUtil::formatDatetime($location['endOn' . $nextDay], 'timelong');
		$nextStart2Time = \DateUtil::formatDatetime($location['start2On' . $nextDay], 'timelong');
		$nextEnd2Time = \DateUtil::formatDatetime($location['end2On' . $nextDay], 'timelong');
    	
    	// we get actual time
    	$actualTime = date('H:i:s');
    	// we set state
    	$state = '';
    	// we check the first times
    	if ($startTime != '') {
    	    if ($startTime < $actualTime) {

    	    	if ($endTime != '') {
 
    		    if ($endTime >= $actualTime || ($endTime < $actualTime && $nextStartTime != '' && $nextStartTime > $actualTime)) {

    			    $state = 'open';
    		    } else {

    		    	$state = 'closed';
    		    }
    	    } else {
    		    $state = 'openEnd';
    	    }
    	} else {
    		if ($endTime == '') {
    			$state = 'openEnd';
    		} else {
    		$state = 'closed';
    		}
    	}
    	}

    	// we check the second times
    	if ($start2Time != '') {
    		if ($start2Time < $actualTime) {
    			//die('start kleiner actual');
    			if ($end2Time != '') {
    				//die('end nicht null');
    				if ($end2Time >= $actualTime || ($end2Time < $actualTime && $nextStartTime != '' && $nextStartTime > $actualTime)) {
    					//die('end groesser aktual');
    					if ($state != 'open') {
    					    $state = 'open';
    					}
    				} else {
    					//die('end kleiner aktual');
    					if ($state != 'closed') {
    					    $state = 'closed';
    					}
    				}
    			} else {
    				if ($state != 'openEnd') {
    				    $state = 'openEnd';
    				}
    			}
    		} else {
    		    if ($end2Time == '' && $state != 'openEnd') {
    			$state = 'openEnd';
    		} else {
    			if ($state != 'closed') {
    		$state = 'closed';
    			}
    		}
    		}
    	}
    	
    	if ($state == 'open' || $state == 'openEnd' || $state == 'closed') {
    		$hours = $startTimeFine;
    		if ($endTime != '') {
    			$hours .= ' - ' . $endTimeFine;
    		} else {
    			if ($start2Time == '') {
    			$hours .= ' - ' . $this->__('Open end');
    			}
    		}
    		if ($start2Time != '') {
    			$hours .= "\n" . $start2TimeFine;
    			
    		    if ($end2Time != '') {
    			    $hours .= ' - ' . $end2TimeFine;
    		    } else {
    			    $hours .= ' - ' . $this->__('Open End');
    		    }    			
    		}

    	} else {
    		$hours = 'none';
    	}
    	if ($kind == 1) {
    	    return $state;
    	} else {
    		return $hours;
    	}
    }
    
    /**
     * 
     */
    private function getActualDay()
    {
    	$wochentage = array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Tuesday', 'Friday', 'Saturday');
    	
    	$tag = date ( "w" );
    	$year = date ( "Y" );
    	
    	return $wochentage[$tag];
    	
    }
}
