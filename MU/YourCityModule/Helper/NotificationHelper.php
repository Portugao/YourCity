<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Helper;

use MU\YourCityModule\Helper\Base\AbstractNotificationHelper;

/**
 * Notification helper implementation class.
 */
class NotificationHelper extends AbstractNotificationHelper
{
    /**
     * Sends a mail to either an item's creator or a group of moderators.
     *
     * @return boolean
     */
    public function processSubscriberMails($entity)
    {
    	if ($entity) {
    	$abos = $entity->getAbonnements();
    	}
    	if (!abos) {
    		return false;
    	} else {
    	    $this->collectLocationRecipients($abos);    		
    	}
    	

    	
        /*if (!isset($args['recipientType']) || !$args['recipientType']) {
            return false;
        }
    
        if (!isset($args['action']) || !$args['action']) {
            return false;
        }
    
        if (!isset($args['entity']) || !$args['entity']) {
            return false;
        }
    
        $this->recipientType = $args['recipientType'];
        $this->action = $args['action'];
        $this->entity = $args['entity'];*/
    
        $this->collectLocationRecipients($abos);
    
        if (!count($this->recipients)) {
            return true;
        }
    
        if (null === $this->kernel->getModule('ZikulaMailerModule')) {
            $this->session->getFlashBag()->add('error', $this->__('Could not inform other persons about your amendments, because the Mailer module is not available - please contact an administrator about that!'));
    
            return; false;
        }
    
        $result = $this->sendSubscriberMails();
    
        $this->session->del($this->name . 'AdditionalNotificationRemarks');
    
        return true;
    }
    
    protected function collectLocationRecipients($abos)
    {
    	$this->recipients = [];
    	foreach ($abos as $abo) {
    		$this->addLocationRecipient($abo->getCreatedBy());
    	}
    }
    
    /**
     * Collects data for building the recipients array.
     *
     * @param UserEntity $user Recipient user record
     */
    protected function addLocationRecipient(UserEntity $user = null)
    {    
    	if (null === $user) {
    		return;
    	}
    
    	$userAttributes = $user->getAttributes();
    
    	$this->recipients[] = [
    			'name' => isset($userAttributes['name']) && !empty($userAttributes['name']) ? $userAttributes['name'] : $user->getUname(),
    			'email' => $user->getEmail()
    	];
    }
    
    /**
     * Performs the actual mailing.
     */
    protected function sendSubscriberMails()
    {
    	$objectType = $this->entity['_objectType'];
    	$siteName = $this->variableApi->getSystemVar('sitename');
    	$adminMail = $this->variableApi->getSystemVar('adminmail');
    	
    	$template = 'Email/notifyLocationSubscriber.html.twig';
    
    	$mailData = $this->prepareSubscriberEmailData();
    	$subject = $this->getSubscriberMailSubject();
    
    	// send one mail per recipient
    	$totalResult = true;
    	foreach ($this->recipients as $recipient) {
    		if (!isset($recipient['name']) || !$recipient['name']) {
    			continue;
    		}
    		if (!isset($recipient['email']) || !$recipient['email']) {
    			continue;
    		}
    
    		$body = $this->templating->render('@MUYourCityModule/' . $template, [
    				'recipient' => $recipient,
    				'mailData' => $mailData
    		]);
    		$altBody = '';
    		$html = true;
    
    		// create new message instance
    		/** @var Swift_Message */
    		$message = Swift_Message::newInstance();
    
    		$message->setFrom([$adminMail => $siteName]);
    		$message->setTo([$recipient['email'] => $recipient['name']]);
    
    		$totalResult &= $this->mailerApi->sendMessage($message, $subject, $body, $altBody, $html);
    	}
    
    	return $totalResult;
    }
    
    /**
     * Returns the subject used for the emails to be sent.
     *
     * @return string
     */
    protected function getSubscriberMailSubject()
    {
    	$mailSubject = $this->__('You have subscribed to this location');
    
    	return $mailSubject;
    }
    
    /**
     * Collects data used by the email templates.
     *
     * @return array
     */
    protected function prepareSubscriberEmailData()
    {
    	$objectType = $this->entity->get_objectType();
    
    	$remarks = $this->session->get($this->name . 'AdditionalNotificationRemarks', '');
    
    	$urlArgs = $this->entity->createUrlArgs();
    
    	$hasDisplayAction = in_array($objectType, ['branch', 'location', 'part', 'offer', 'menuOfLocation', 'partOfMenu', 'dish', 'event', 'product', 'specialOfLocation', 'serviceOfLocation']);
    	$hasEditAction = in_array($objectType, ['branch', 'location', 'part', 'offer', 'menuOfLocation', 'partOfMenu', 'dish', 'event', 'product', 'specialOfLocation', 'serviceOfLocation', 'abonnement']);
    	$routeArea = in_array($this->recipientType, ['moderator', 'superModerator']) ? 'admin' : '';
    	$routePrefix = 'muyourcitymodule_' . strtolower($objectType) . '_' . $routeArea;
    
    	$displayUrl = $hasDisplayAction ? $this->router->generate($routePrefix . 'display', $urlArgs, true) : '';

    	$emailData = [
    			'name' => $this->entityDisplayHelper->getFormattedTitle($this->entity),
    			'remarks' => $remarks,
    			'displayUrl' => $displayUrl
    	];
    
    	return $emailData;
    }
}
