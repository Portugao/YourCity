<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Helper\Base;

use Doctrine\ORM\QueryBuilder;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Zikula\UsersModule\Constant as UsersConstant;
use MU\YourCityModule\Entity\BranchEntity;
use MU\YourCityModule\Entity\LocationEntity;
use MU\YourCityModule\Entity\PartEntity;
use MU\YourCityModule\Entity\ImageOfLocationEntity;
use MU\YourCityModule\Entity\FileOfLocationEntity;
use MU\YourCityModule\Entity\OfferEntity;
use MU\YourCityModule\Entity\MenuOfLocationEntity;
use MU\YourCityModule\Entity\PartOfMenuEntity;
use MU\YourCityModule\Entity\DishEntity;
use MU\YourCityModule\Entity\EventEntity;
use MU\YourCityModule\Entity\ProductEntity;
use MU\YourCityModule\Entity\SpecialOfLocationEntity;
use MU\YourCityModule\Entity\ServiceOfLocationEntity;
use MU\YourCityModule\Entity\AbonnementEntity;
use MU\YourCityModule\Entity\Factory\YourCityFactory;

/**
 * Entity collection filter helper base class.
 */
abstract class AbstractCollectionFilterHelper
{
    /**
     * @var Request
     */
    protected $request;

    /**
     * @var CurrentUserApiInterface
     */
    protected $currentUserApi;

    /**
     * @var bool Fallback value to determine whether only own entries should be selected or not
     */
    protected $showOnlyOwnEntries = false;

    /**
     * CollectionFilterHelper constructor.
     *
     * @param RequestStack $requestStack RequestStack service instance
     * @param CurrentUserApiInterface $currentUserApi        CurrentUserApi service instance
     * @param bool           $showOnlyOwnEntries  Fallback value to determine whether only own entries should be selected or not
     */
    public function __construct(
        RequestStack $requestStack,
        CurrentUserApiInterface $currentUserApi,
        $showOnlyOwnEntries
    ) {
        $this->request = $requestStack->getCurrentRequest();
        $this->currentUserApi = $currentUserApi;
        $this->showOnlyOwnEntries = $showOnlyOwnEntries;
    }

    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $objectType Name of treated entity type
     * @param string $context    Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args       Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    public function getViewQuickNavParameters($objectType = '', $context = '', $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'actionHandler', 'block', 'contentType'])) {
            $context = 'controllerAction';
        }
    
        if ($objectType == 'branch') {
            return $this->getViewQuickNavParametersForBranch($context, $args);
        }
        if ($objectType == 'location') {
            return $this->getViewQuickNavParametersForLocation($context, $args);
        }
        if ($objectType == 'part') {
            return $this->getViewQuickNavParametersForPart($context, $args);
        }
        if ($objectType == 'imageOfLocation') {
            return $this->getViewQuickNavParametersForImageOfLocation($context, $args);
        }
        if ($objectType == 'fileOfLocation') {
            return $this->getViewQuickNavParametersForFileOfLocation($context, $args);
        }
        if ($objectType == 'offer') {
            return $this->getViewQuickNavParametersForOffer($context, $args);
        }
        if ($objectType == 'menuOfLocation') {
            return $this->getViewQuickNavParametersForMenuOfLocation($context, $args);
        }
        if ($objectType == 'partOfMenu') {
            return $this->getViewQuickNavParametersForPartOfMenu($context, $args);
        }
        if ($objectType == 'dish') {
            return $this->getViewQuickNavParametersForDish($context, $args);
        }
        if ($objectType == 'event') {
            return $this->getViewQuickNavParametersForEvent($context, $args);
        }
        if ($objectType == 'product') {
            return $this->getViewQuickNavParametersForProduct($context, $args);
        }
        if ($objectType == 'specialOfLocation') {
            return $this->getViewQuickNavParametersForSpecialOfLocation($context, $args);
        }
        if ($objectType == 'serviceOfLocation') {
            return $this->getViewQuickNavParametersForServiceOfLocation($context, $args);
        }
        if ($objectType == 'abonnement') {
            return $this->getViewQuickNavParametersForAbonnement($context, $args);
        }
    
        return [];
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addCommonViewFilters($objectType, QueryBuilder $qb)
    {
        if ($objectType == 'branch') {
            return $this->addCommonViewFiltersForBranch($qb);
        }
        if ($objectType == 'location') {
            return $this->addCommonViewFiltersForLocation($qb);
        }
        if ($objectType == 'part') {
            return $this->addCommonViewFiltersForPart($qb);
        }
        if ($objectType == 'imageOfLocation') {
            return $this->addCommonViewFiltersForImageOfLocation($qb);
        }
        if ($objectType == 'fileOfLocation') {
            return $this->addCommonViewFiltersForFileOfLocation($qb);
        }
        if ($objectType == 'offer') {
            return $this->addCommonViewFiltersForOffer($qb);
        }
        if ($objectType == 'menuOfLocation') {
            return $this->addCommonViewFiltersForMenuOfLocation($qb);
        }
        if ($objectType == 'partOfMenu') {
            return $this->addCommonViewFiltersForPartOfMenu($qb);
        }
        if ($objectType == 'dish') {
            return $this->addCommonViewFiltersForDish($qb);
        }
        if ($objectType == 'event') {
            return $this->addCommonViewFiltersForEvent($qb);
        }
        if ($objectType == 'product') {
            return $this->addCommonViewFiltersForProduct($qb);
        }
        if ($objectType == 'specialOfLocation') {
            return $this->addCommonViewFiltersForSpecialOfLocation($qb);
        }
        if ($objectType == 'serviceOfLocation') {
            return $this->addCommonViewFiltersForServiceOfLocation($qb);
        }
        if ($objectType == 'abonnement') {
            return $this->addCommonViewFiltersForAbonnement($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function applyDefaultFilters($objectType, QueryBuilder $qb, $parameters = [])
    {
        if ($objectType == 'branch') {
            return $this->applyDefaultFiltersForBranch($qb, $parameters);
        }
        if ($objectType == 'location') {
            return $this->applyDefaultFiltersForLocation($qb, $parameters);
        }
        if ($objectType == 'part') {
            return $this->applyDefaultFiltersForPart($qb, $parameters);
        }
        if ($objectType == 'imageOfLocation') {
            return $this->applyDefaultFiltersForImageOfLocation($qb, $parameters);
        }
        if ($objectType == 'fileOfLocation') {
            return $this->applyDefaultFiltersForFileOfLocation($qb, $parameters);
        }
        if ($objectType == 'offer') {
            return $this->applyDefaultFiltersForOffer($qb, $parameters);
        }
        if ($objectType == 'menuOfLocation') {
            return $this->applyDefaultFiltersForMenuOfLocation($qb, $parameters);
        }
        if ($objectType == 'partOfMenu') {
            return $this->applyDefaultFiltersForPartOfMenu($qb, $parameters);
        }
        if ($objectType == 'dish') {
            return $this->applyDefaultFiltersForDish($qb, $parameters);
        }
        if ($objectType == 'event') {
            return $this->applyDefaultFiltersForEvent($qb, $parameters);
        }
        if ($objectType == 'product') {
            return $this->applyDefaultFiltersForProduct($qb, $parameters);
        }
        if ($objectType == 'specialOfLocation') {
            return $this->applyDefaultFiltersForSpecialOfLocation($qb, $parameters);
        }
        if ($objectType == 'serviceOfLocation') {
            return $this->applyDefaultFiltersForServiceOfLocation($qb, $parameters);
        }
        if ($objectType == 'abonnement') {
            return $this->applyDefaultFiltersForAbonnement($qb, $parameters);
        }
    
        return $qb;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForBranch($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForLocation($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['partOfCity'] = $this->request->query->get('partOfCity', '');
        $parameters['owner'] = (int) $this->request->query->get('owner', 0);
        $parameters['admin1'] = (int) $this->request->query->get('admin1', 0);
        $parameters['admin2'] = (int) $this->request->query->get('admin2', 0);
        $parameters['q'] = $this->request->query->get('q', '');
        $parameters['closedForEver'] = $this->request->query->get('closedForEver', '');
        $parameters['agreement'] = $this->request->query->get('agreement', '');
        $parameters['unclearTimes'] = $this->request->query->get('unclearTimes', '');
        $parameters['closedOnMonday'] = $this->request->query->get('closedOnMonday', '');
        $parameters['closedOnTuesday'] = $this->request->query->get('closedOnTuesday', '');
        $parameters['closedOnWednesday'] = $this->request->query->get('closedOnWednesday', '');
        $parameters['closedOnThursday'] = $this->request->query->get('closedOnThursday', '');
        $parameters['closedOnFriday'] = $this->request->query->get('closedOnFriday', '');
        $parameters['closedOnSaturday'] = $this->request->query->get('closedOnSaturday', '');
        $parameters['closedOnSunday'] = $this->request->query->get('closedOnSunday', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForPart($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForImageOfLocation($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForFileOfLocation($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForOffer($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForMenuOfLocation($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['kindOfMenu'] = $this->request->query->get('kindOfMenu', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForPartOfMenu($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['menuOfLocation'] = $this->request->query->get('menuOfLocation', 0);
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForDish($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['menuOfLocation'] = $this->request->query->get('menuOfLocation', 0);
        $parameters['partOfMenu'] = $this->request->query->get('partOfMenu', 0);
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['kindOfDish'] = $this->request->query->get('kindOfDish', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForEvent($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['kindOfEvent'] = $this->request->query->get('kindOfEvent', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForProduct($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['kindOfProduct'] = $this->request->query->get('kindOfProduct', '');
        $parameters['today'] = $this->request->query->get('today', '');
        $parameters['q'] = $this->request->query->get('q', '');
        $parameters['monday'] = $this->request->query->get('monday', '');
        $parameters['tuesday'] = $this->request->query->get('tuesday', '');
        $parameters['wednesday'] = $this->request->query->get('wednesday', '');
        $parameters['thursday'] = $this->request->query->get('thursday', '');
        $parameters['friday'] = $this->request->query->get('friday', '');
        $parameters['saturday'] = $this->request->query->get('saturday', '');
        $parameters['sunday'] = $this->request->query->get('sunday', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForSpecialOfLocation($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForServiceOfLocation($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForAbonnement($context = '', $args = [])
    {
        $parameters = [];
        if (!is_object($this->request)) {
            return $parameters;
        }
    
        $parameters['location'] = $this->request->query->get('location', 0);
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['q'] = $this->request->query->get('q', '');
        $parameters['showMenus'] = $this->request->query->get('showMenus', '');
        $parameters['sendMessageForMenus'] = $this->request->query->get('sendMessageForMenus', '');
        $parameters['showOffers'] = $this->request->query->get('showOffers', '');
        $parameters['sendMessageForOffers'] = $this->request->query->get('sendMessageForOffers', '');
        $parameters['showEvents'] = $this->request->query->get('showEvents', '');
        $parameters['sendMessageForEvents'] = $this->request->query->get('sendMessageForEvents', '');
        $parameters['showProducts'] = $this->request->query->get('showProducts', '');
        $parameters['sendMessageForProducts'] = $this->request->query->get('sendMessageForProducts', '');
        $parameters['showOptionOne'] = $this->request->query->get('showOptionOne', '');
        $parameters['sendMessageToOptionOne'] = $this->request->query->get('sendMessageToOptionOne', '');
        $parameters['showOptionTwo'] = $this->request->query->get('showOptionTwo', '');
        $parameters['sendMessageToOptionTwo'] = $this->request->query->get('sendMessageToOptionTwo', '');
        $parameters['showOptionThree'] = $this->request->query->get('showOptionThree', '');
        $parameters['sendMessageToOptionThree'] = $this->request->query->get('sendMessageToOptionThree', '');
    
        return $parameters;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForBranch(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForBranch();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('branch');
                    $qb = $repository->addSearchFilter('branch', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForBranch($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForLocation(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForLocation();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('location');
                    $qb = $repository->addSearchFilter('location', $qb, $v);
                }
            } elseif (in_array($k, ['closedForEver', 'agreement', 'unclearTimes', 'closedOnMonday', 'closedOnTuesday', 'closedOnWednesday', 'closedOnThursday', 'closedOnFriday', 'closedOnSaturday', 'closedOnSunday'])) {
                // boolean filter
                if ($v == 'no') {
                    $qb->andWhere('tbl.' . $k . ' = 0');
                } elseif ($v == 'yes' || $v == '1') {
                    $qb->andWhere('tbl.' . $k . ' = 1');
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        if (in_array($k, ['owner', 'admin1', 'admin2'])) {
                            $qb->leftJoin('tbl.' . $k, 'tbl' . ucfirst($k))
                               ->andWhere('tbl' . ucfirst($k) . '.uid = :' . $k)
                               ->setParameter($k, $v);
                        } else {
                            $qb->andWhere('tbl.' . $k . ' = :' . $k)
                               ->setParameter($k, $v);
                        }
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForLocation($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForPart(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForPart();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('part');
                    $qb = $repository->addSearchFilter('part', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForPart($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForImageOfLocation(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForImageOfLocation();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('imageOfLocation');
                    $qb = $repository->addSearchFilter('imageOfLocation', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForImageOfLocation($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForFileOfLocation(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForFileOfLocation();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('fileOfLocation');
                    $qb = $repository->addSearchFilter('fileOfLocation', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForFileOfLocation($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForOffer(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForOffer();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('offer');
                    $qb = $repository->addSearchFilter('offer', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForOffer($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForMenuOfLocation(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForMenuOfLocation();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('menuOfLocation');
                    $qb = $repository->addSearchFilter('menuOfLocation', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForMenuOfLocation($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForPartOfMenu(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForPartOfMenu();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('partOfMenu');
                    $qb = $repository->addSearchFilter('partOfMenu', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForPartOfMenu($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForDish(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForDish();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('dish');
                    $qb = $repository->addSearchFilter('dish', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForDish($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForEvent(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForEvent();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('event');
                    $qb = $repository->addSearchFilter('event', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForEvent($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForProduct(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForProduct();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('product');
                    $qb = $repository->addSearchFilter('product', $qb, $v);
                }
            } elseif (in_array($k, ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'])) {
                // boolean filter
                if ($v == 'no') {
                    $qb->andWhere('tbl.' . $k . ' = 0');
                } elseif ($v == 'yes' || $v == '1') {
                    $qb->andWhere('tbl.' . $k . ' = 1');
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForProduct($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForSpecialOfLocation(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForSpecialOfLocation();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('specialOfLocation');
                    $qb = $repository->addSearchFilter('specialOfLocation', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForSpecialOfLocation($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForServiceOfLocation(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForServiceOfLocation();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('serviceOfLocation');
                    $qb = $repository->addSearchFilter('serviceOfLocation', $qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForServiceOfLocation($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForAbonnement(QueryBuilder $qb)
    {
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForAbonnement();
        foreach ($parameters as $k => $v) {
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $repository = $this->entityFactory->getRepository('abonnement');
                    $qb = $repository->addSearchFilter('abonnement', $qb, $v);
                }
            } elseif (in_array($k, ['showMenus', 'sendMessageForMenus', 'showOffers', 'sendMessageForOffers', 'showEvents', 'sendMessageForEvents', 'showProducts', 'sendMessageForProducts', 'showOptionOne', 'sendMessageToOptionOne', 'showOptionTwo', 'sendMessageToOptionTwo', 'showOptionThree', 'sendMessageToOptionThree'])) {
                // boolean filter
                if ($v == 'no') {
                    $qb->andWhere('tbl.' . $k . ' = 0');
                } elseif ($v == 'yes' || $v == '1') {
                    $qb->andWhere('tbl.' . $k . ' = 1');
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForAbonnement($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForBranch(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_branch_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForLocation(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_location_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved locations only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForPart(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_part_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForImageOfLocation(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_image of location_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForFileOfLocation(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_file of location_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForOffer(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_offer_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved offers only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
        
        $startDate = $this->request->query->get('inViewFrom', date('Y-m-d H:i:s'));
        $qb->andWhere('(tbl.inViewFrom <= :startDate OR tbl.inViewFrom IS NULL)')
           ->setParameter('startDate', $startDate);
        
        $endDate = $this->request->query->get('inViewUntil', date('Y-m-d H:i:s'));
        $qb->andWhere('(tbl.inViewUntil >= :endDate OR tbl.inViewUntil IS NULL)')
           ->setParameter('endDate', $endDate);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForMenuOfLocation(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_menu of location_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved menus of location only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
        
        $startDate = $this->request->query->get('inViewFrom', date('Y-m-d H:i:s'));
        $qb->andWhere('(tbl.inViewFrom <= :startDate OR tbl.inViewFrom IS NULL)')
           ->setParameter('startDate', $startDate);
        
        $endDate = $this->request->query->get('inViewUntil', date('Y-m-d H:i:s'));
        $qb->andWhere('(tbl.inViewUntil >= :endDate OR tbl.inViewUntil IS NULL)')
           ->setParameter('endDate', $endDate);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForPartOfMenu(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_part of menu_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForDish(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_dish_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForEvent(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_event_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved events only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
        
        $startDate = $this->request->query->get('inViewFrom', date('Y-m-d H:i:s'));
        $qb->andWhere('(tbl.inViewFrom <= :startDate OR tbl.inViewFrom IS NULL)')
           ->setParameter('startDate', $startDate);
        
        $endDate = $this->request->query->get('inViewUntil', date('Y-m-d H:i:s'));
        $qb->andWhere('(tbl.inViewUntil >= :endDate OR tbl.inViewUntil IS NULL)')
           ->setParameter('endDate', $endDate);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForProduct(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_product_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved products only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForSpecialOfLocation(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_special of location_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForServiceOfLocation(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_service of location_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForAbonnement(QueryBuilder $qb, $parameters = [])
    {
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'muyourcitymodule_abonnement_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved abonnements only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds a where clause for search query.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param string       $fragment   The fragment to search for
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addSearchFilter($objectType, QueryBuilder $qb, $fragment = '')
    {
        if ($fragment == '') {
            return $qb;
        }
    
        $filters = [];
        $parameters = [];
    
        if ($objectType == 'branch') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.descriptionForGoogle LIKE :searchDescriptionForGoogle';
            $parameters['searchDescriptionForGoogle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageOfBranch = :searchImageOfBranch';
            $parameters['searchImageOfBranch'] = $fragment;
        }
        if ($objectType == 'location') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.letterForOrder LIKE :searchLetterForOrder';
            $parameters['searchLetterForOrder'] = '%' . $fragment . '%';
            $filters[] = 'tbl.slogan LIKE :searchSlogan';
            $parameters['searchSlogan'] = '%' . $fragment . '%';
            $filters[] = 'tbl.logoOfYourLocation = :searchLogoOfYourLocation';
            $parameters['searchLogoOfYourLocation'] = $fragment;
            $filters[] = 'tbl.descriptionForGoogle LIKE :searchDescriptionForGoogle';
            $parameters['searchDescriptionForGoogle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description2 LIKE :searchDescription2';
            $parameters['searchDescription2'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageOfLocation = :searchImageOfLocation';
            $parameters['searchImageOfLocation'] = $fragment;
            $filters[] = 'tbl.street LIKE :searchStreet';
            $parameters['searchStreet'] = '%' . $fragment . '%';
            $filters[] = 'tbl.numberOfStreet LIKE :searchNumberOfStreet';
            $parameters['searchNumberOfStreet'] = '%' . $fragment . '%';
            $filters[] = 'tbl.zipCode LIKE :searchZipCode';
            $parameters['searchZipCode'] = '%' . $fragment . '%';
            $filters[] = 'tbl.city LIKE :searchCity';
            $parameters['searchCity'] = '%' . $fragment . '%';
            $filters[] = 'tbl.telefon LIKE :searchTelefon';
            $parameters['searchTelefon'] = '%' . $fragment . '%';
            $filters[] = 'tbl.mobil LIKE :searchMobil';
            $parameters['searchMobil'] = '%' . $fragment . '%';
            $filters[] = 'tbl.homepage = :searchHomepage';
            $parameters['searchHomepage'] = $fragment;
            $filters[] = 'tbl.bsagStop LIKE :searchBsagStop';
            $parameters['searchBsagStop'] = '%' . $fragment . '%';
            $filters[] = 'tbl.tram LIKE :searchTram';
            $parameters['searchTram'] = '%' . $fragment . '%';
            $filters[] = 'tbl.bus LIKE :searchBus';
            $parameters['searchBus'] = '%' . $fragment . '%';
            $filters[] = 'tbl.openingHours LIKE :searchOpeningHours';
            $parameters['searchOpeningHours'] = '%' . $fragment . '%';
            $filters[] = 'tbl.startOnMonday = :searchStartOnMonday';
            $parameters['searchStartOnMonday'] = $fragment;
            $filters[] = 'tbl.endOnMonday = :searchEndOnMonday';
            $parameters['searchEndOnMonday'] = $fragment;
            $filters[] = 'tbl.start2OnMonday = :searchStart2OnMonday';
            $parameters['searchStart2OnMonday'] = $fragment;
            $filters[] = 'tbl.end2OnMonday = :searchEnd2OnMonday';
            $parameters['searchEnd2OnMonday'] = $fragment;
            $filters[] = 'tbl.startOnTuesday = :searchStartOnTuesday';
            $parameters['searchStartOnTuesday'] = $fragment;
            $filters[] = 'tbl.endOnTuesday = :searchEndOnTuesday';
            $parameters['searchEndOnTuesday'] = $fragment;
            $filters[] = 'tbl.start2OnTuesday = :searchStart2OnTuesday';
            $parameters['searchStart2OnTuesday'] = $fragment;
            $filters[] = 'tbl.end2OnTuesday = :searchEnd2OnTuesday';
            $parameters['searchEnd2OnTuesday'] = $fragment;
            $filters[] = 'tbl.startOnWednesday = :searchStartOnWednesday';
            $parameters['searchStartOnWednesday'] = $fragment;
            $filters[] = 'tbl.endOnWednesday = :searchEndOnWednesday';
            $parameters['searchEndOnWednesday'] = $fragment;
            $filters[] = 'tbl.start2OnWednesday = :searchStart2OnWednesday';
            $parameters['searchStart2OnWednesday'] = $fragment;
            $filters[] = 'tbl.end2OnWednesday = :searchEnd2OnWednesday';
            $parameters['searchEnd2OnWednesday'] = $fragment;
            $filters[] = 'tbl.startOnThursday = :searchStartOnThursday';
            $parameters['searchStartOnThursday'] = $fragment;
            $filters[] = 'tbl.endOnThursday = :searchEndOnThursday';
            $parameters['searchEndOnThursday'] = $fragment;
            $filters[] = 'tbl.start2OnThursday = :searchStart2OnThursday';
            $parameters['searchStart2OnThursday'] = $fragment;
            $filters[] = 'tbl.end2OnThursday = :searchEnd2OnThursday';
            $parameters['searchEnd2OnThursday'] = $fragment;
            $filters[] = 'tbl.startOnFriday = :searchStartOnFriday';
            $parameters['searchStartOnFriday'] = $fragment;
            $filters[] = 'tbl.endOnFriday = :searchEndOnFriday';
            $parameters['searchEndOnFriday'] = $fragment;
            $filters[] = 'tbl.start2OnFriday = :searchStart2OnFriday';
            $parameters['searchStart2OnFriday'] = $fragment;
            $filters[] = 'tbl.end2OnFriday = :searchEnd2OnFriday';
            $parameters['searchEnd2OnFriday'] = $fragment;
            $filters[] = 'tbl.startOnSaturday = :searchStartOnSaturday';
            $parameters['searchStartOnSaturday'] = $fragment;
            $filters[] = 'tbl.endOnSaturday = :searchEndOnSaturday';
            $parameters['searchEndOnSaturday'] = $fragment;
            $filters[] = 'tbl.start2OnSaturday = :searchStart2OnSaturday';
            $parameters['searchStart2OnSaturday'] = $fragment;
            $filters[] = 'tbl.end2OnSaturday = :searchEnd2OnSaturday';
            $parameters['searchEnd2OnSaturday'] = $fragment;
            $filters[] = 'tbl.startOnSunday = :searchStartOnSunday';
            $parameters['searchStartOnSunday'] = $fragment;
            $filters[] = 'tbl.endOnSunday = :searchEndOnSunday';
            $parameters['searchEndOnSunday'] = $fragment;
            $filters[] = 'tbl.start2OnSunday = :searchStart2OnSunday';
            $parameters['searchStart2OnSunday'] = $fragment;
            $filters[] = 'tbl.end2OnSunday = :searchEnd2OnSunday';
            $parameters['searchEnd2OnSunday'] = $fragment;
            $filters[] = 'tbl.partOfCity = :searchPartOfCity';
            $parameters['searchPartOfCity'] = $fragment;
        }
        if ($objectType == 'part') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.descriptionForGoogle LIKE :searchDescriptionForGoogle';
            $parameters['searchDescriptionForGoogle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageOfPart = :searchImageOfPart';
            $parameters['searchImageOfPart'] = $fragment;
        }
        if ($objectType == 'imageOfLocation') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.image = :searchImage';
            $parameters['searchImage'] = $fragment;
            $filters[] = 'tbl.positionOfImage = :searchPositionOfImage';
            $parameters['searchPositionOfImage'] = $fragment;
        }
        if ($objectType == 'fileOfLocation') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.fileOfFile = :searchFileOfFile';
            $parameters['searchFileOfFile'] = $fragment;
            $filters[] = 'tbl.positionOfFile = :searchPositionOfFile';
            $parameters['searchPositionOfFile'] = $fragment;
        }
        if ($objectType == 'offer') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.urlToOfferOnHomepage = :searchUrlToOfferOnHomepage';
            $parameters['searchUrlToOfferOnHomepage'] = $fragment;
            $filters[] = 'tbl.imageOfOffer = :searchImageOfOffer';
            $parameters['searchImageOfOffer'] = $fragment;
            $filters[] = 'tbl.priceOfOffer = :searchPriceOfOffer';
            $parameters['searchPriceOfOffer'] = $fragment;
            $filters[] = 'tbl.normalPrice = :searchNormalPrice';
            $parameters['searchNormalPrice'] = $fragment;
            $filters[] = 'tbl.percentOfOffer = :searchPercentOfOffer';
            $parameters['searchPercentOfOffer'] = $fragment;
            $filters[] = 'tbl.effectivFrom = :searchEffectivFrom';
            $parameters['searchEffectivFrom'] = $fragment;
            $filters[] = 'tbl.effectivUntil = :searchEffectivUntil';
            $parameters['searchEffectivUntil'] = $fragment;
            $filters[] = 'tbl.inViewFrom = :searchInViewFrom';
            $parameters['searchInViewFrom'] = $fragment;
            $filters[] = 'tbl.inViewUntil = :searchInViewUntil';
            $parameters['searchInViewUntil'] = $fragment;
        }
        if ($objectType == 'menuOfLocation') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageOfMenu = :searchImageOfMenu';
            $parameters['searchImageOfMenu'] = $fragment;
            $filters[] = 'tbl.positionOfMenu = :searchPositionOfMenu';
            $parameters['searchPositionOfMenu'] = $fragment;
            $filters[] = 'tbl.kindOfMenu = :searchKindOfMenu';
            $parameters['searchKindOfMenu'] = $fragment;
            $filters[] = 'tbl.additionalRemarks LIKE :searchAdditionalRemarks';
            $parameters['searchAdditionalRemarks'] = '%' . $fragment . '%';
            $filters[] = 'tbl.effectivFrom = :searchEffectivFrom';
            $parameters['searchEffectivFrom'] = $fragment;
            $filters[] = 'tbl.effectivUntil = :searchEffectivUntil';
            $parameters['searchEffectivUntil'] = $fragment;
            $filters[] = 'tbl.inViewFrom = :searchInViewFrom';
            $parameters['searchInViewFrom'] = $fragment;
            $filters[] = 'tbl.inViewUntil = :searchInViewUntil';
            $parameters['searchInViewUntil'] = $fragment;
        }
        if ($objectType == 'partOfMenu') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.positionOfPart = :searchPositionOfPart';
            $parameters['searchPositionOfPart'] = $fragment;
        }
        if ($objectType == 'dish') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.kindOfDish = :searchKindOfDish';
            $parameters['searchKindOfDish'] = $fragment;
            $filters[] = 'tbl.imageOfDish = :searchImageOfDish';
            $parameters['searchImageOfDish'] = $fragment;
            $filters[] = 'tbl.priceOfDish = :searchPriceOfDish';
            $parameters['searchPriceOfDish'] = $fragment;
            $filters[] = 'tbl.ingredients LIKE :searchIngredients';
            $parameters['searchIngredients'] = '%' . $fragment . '%';
            $filters[] = 'tbl.positionOfDish = :searchPositionOfDish';
            $parameters['searchPositionOfDish'] = $fragment;
        }
        if ($objectType == 'event') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageOfEvent = :searchImageOfEvent';
            $parameters['searchImageOfEvent'] = $fragment;
            $filters[] = 'tbl.kindOfEvent = :searchKindOfEvent';
            $parameters['searchKindOfEvent'] = $fragment;
            $filters[] = 'tbl.street LIKE :searchStreet';
            $parameters['searchStreet'] = '%' . $fragment . '%';
            $filters[] = 'tbl.numberOfStreet LIKE :searchNumberOfStreet';
            $parameters['searchNumberOfStreet'] = '%' . $fragment . '%';
            $filters[] = 'tbl.zipCode LIKE :searchZipCode';
            $parameters['searchZipCode'] = '%' . $fragment . '%';
            $filters[] = 'tbl.city LIKE :searchCity';
            $parameters['searchCity'] = '%' . $fragment . '%';
            $filters[] = 'tbl.startDate = :searchStartDate';
            $parameters['searchStartDate'] = $fragment;
            $filters[] = 'tbl.endDate = :searchEndDate';
            $parameters['searchEndDate'] = $fragment;
            $filters[] = 'tbl.start2Date = :searchStart2Date';
            $parameters['searchStart2Date'] = $fragment;
            $filters[] = 'tbl.end2Date = :searchEnd2Date';
            $parameters['searchEnd2Date'] = $fragment;
            $filters[] = 'tbl.inViewFrom = :searchInViewFrom';
            $parameters['searchInViewFrom'] = $fragment;
            $filters[] = 'tbl.inViewUntil = :searchInViewUntil';
            $parameters['searchInViewUntil'] = $fragment;
        }
        if ($objectType == 'product') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.kindOfProduct = :searchKindOfProduct';
            $parameters['searchKindOfProduct'] = $fragment;
            $filters[] = 'tbl.imageOfProduct = :searchImageOfProduct';
            $parameters['searchImageOfProduct'] = $fragment;
            $filters[] = 'tbl.today = :searchToday';
            $parameters['searchToday'] = $fragment;
            $filters[] = 'tbl.priceOfProduct = :searchPriceOfProduct';
            $parameters['searchPriceOfProduct'] = $fragment;
        }
        if ($objectType == 'specialOfLocation') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.descriptionForGoogle LIKE :searchDescriptionForGoogle';
            $parameters['searchDescriptionForGoogle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.iconForSpecial LIKE :searchIconForSpecial';
            $parameters['searchIconForSpecial'] = '%' . $fragment . '%';
            $filters[] = 'tbl.colorOfIcon LIKE :searchColorOfIcon';
            $parameters['searchColorOfIcon'] = '%' . $fragment . '%';
        }
        if ($objectType == 'serviceOfLocation') {
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.description LIKE :searchDescription';
            $parameters['searchDescription'] = '%' . $fragment . '%';
            $filters[] = 'tbl.descriptionForGoogle LIKE :searchDescriptionForGoogle';
            $parameters['searchDescriptionForGoogle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.iconForService LIKE :searchIconForService';
            $parameters['searchIconForService'] = '%' . $fragment . '%';
        }
        if ($objectType == 'abonnement') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.name LIKE :searchName';
            $parameters['searchName'] = '%' . $fragment . '%';
            $filters[] = 'tbl.positionOfAbo = :searchPositionOfAbo';
            $parameters['searchPositionOfAbo'] = $fragment;
        }
    
        $qb->andWhere('(' . implode(' OR ', $filters) . ')');
    
        foreach ($parameters as $parameterName => $parameterValue) {
            $qb->setParameter($parameterName, $parameterValue);
        }
    
        return $qb;
    }
    
    /**
     * Adds a filter for the createdBy field.
     *
     * @param QueryBuilder $qb     Query builder to be enhanced
     * @param integer      $userId The user identifier used for filtering
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addCreatorFilter(QueryBuilder $qb, $userId = null)
    {
        if (null === $userId) {
            $userId = $this->currentUserApi->isLoggedIn() ? $this->currentUserApi->get('uid') : UsersConstant::USER_ID_ANONYMOUS;
        }
    
        if (is_array($userId)) {
            $qb->andWhere('tbl.createdBy IN (:userIds)')
               ->setParameter('userIds', $userId);
        } else {
            $qb->andWhere('tbl.createdBy = :userId')
               ->setParameter('userId', $userId);
        }
    
        return $qb;
    }
}
