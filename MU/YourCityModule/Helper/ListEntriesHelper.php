<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Helper;

use MU\YourCityModule\Helper\Base\AbstractListEntriesHelper;
use MU\YourCityModule\Entity\Factory\EntityFactory;
use MU\YourCityModule\Helper\ControllerHelper;
use Doctrine\Common\Collections\Criteria;

/**
 * Helper implementation class for list field entries related methods.
 */
class ListEntriesHelper extends AbstractListEntriesHelper
{
	/**
	 * @var ControllerHelper
	 */
	protected $controllerHelper;
	/**
	 * @var EntityFactory
	 */
	protected $entityFactory;
	
	/**
	 * Return the name or names for a given list item.
	 *
	 * @param string $value      The dropdown value to process
	 * @param string $objectType The treated object type
	 * @param string $fieldName  The list field's name
	 * @param string $delimiter  String used as separator for multiple selections
	 *
	 * @return string List item name
	 */
	public function resolve($value, $objectType = '', $fieldName = '', $delimiter = ', ')
	{
		if ((empty($value) && $value != '0') || empty($objectType) || empty($fieldName)) {
			return $value;
		}
	
		$isMulti = $this->hasMultipleSelection($objectType, $fieldName);
		if (true === $isMulti) {
			$value = $this->extractMultiList($value);
		}
	
		$options = $this->getEntries($objectType, $fieldName);
		$result = '';
	
		if (true === $isMulti) {
			foreach ($options as $option) {
				if (!in_array($option['value'], $value)) {
					continue;
				}
				if (!empty($result)) {
					$result .= $delimiter;
				}
				$result .= $option['text'];
			}
		} else {
			foreach ($options as $option) {
				if ($option['value'] != $value) {
					continue;
				}
				$result = $option['text'];
				break;
			}
		}
		/*if ($objectType == 'product') {
			$repository = $this->entityFactory->getRepository('location');
			$criteria = new \Doctrine\Common\Collections\Criteria();
			$criteria
			->orWhere($criteria->expr()->contains('name', $result));
			$locations = $repository->matching($criteria);
			$result = '';
			foreach ($locations as $location) {
			$result = $location['name'] . 'Hallo';
			}
		}*/
	
		return $result;
	}
	
	/**
	 * Get 'part of city' list entries.
	 *
	 * @return array Array with desired list entries
	 */
	public function getPartOfCityEntriesForLocation()
	{
		$partRespository = $this->entityFactory->getRepository('part');
		$parts = $partRespository->findAll();
		
		$states = [];		
		
		foreach ($parts as $part) {

		$states[] = [
				'value'   => $part['name'],
				'text'    => $part['name'],
				'title'   => '',
				'image'   => '',
				'default' => false
		];
		}
	
		return $states;
	}
	
    /**
     * Get 'branch of location' list entries.
     *
     * @return array Array with desired list entries
     */
    /*public function getBranchOfLocationEntriesForLocation()
    {
    	$branchRespository = $this->entityFactory->getRepository('branch');
    	$branches = $branchRespository->findAll();
        $states = [];
        foreach ($branches as $branch) {
        $states[] = [
            'value'   => $branch['name'],
            'text'    => $branch['name'],
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        }
    
        return $states;
    }*/
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForEvent()
    {
        $states = $this->getLocations();
    
    	return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForMenuOfLocation()
    {
        $states = $this->getLocations();
    
    	return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForPartOfMenu()
    {
        $states = $this->getLocations();
    
        return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForDish()
    {
    	$states = $this->getLocations();
    
    	return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForOffer()
    {
    	$states = $this->getLocations();
    
    	return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForProduct()
    {
    	$states = $this->getLocations();
    	return $states;
    }
    
    /**
     * Get 'locations' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getLocations()
    {
    	$uid = $this->controllerHelper->getUid();
    	$states = [];
    	$locationRepository = $this->entityFactory->getRepository('location');
    	if ($uid != 2) {
    	$criteria = array('owner' => $uid);
    	$criteria2 = array('admin1' => $uid);
    	$criteria3 = array('admin2' => $uid);
    	$locations = $locationRepository->findBy($criteria);
    	$locations2 = $locationRepository->findBy($criteria2);
    	$locations3 = $locationRepository->findBy($criteria3);
    	$states = [];
    	foreach ($locations as $location) {
    		$states[] = [
    				'value'   => $location['id'],
    				'text'    => $location['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    	foreach ($locations2 as $location) {
    		$states[] = [
    				'value'   => $location['id'],
    				'text'    => $location['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    	foreach ($locations3 as $location) {
    		$states[] = [
    				'value'   => $location['id'],
    				'text'    => $location['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    	} else {
    		$locations = $locationRepository->findBy(array('workflowState' => 'approved', 'closedForEver' => false), array('name' => 'ASC'));
    		foreach ($locations as $location) {
    			$states[] = [
    					'value'   => $location['id'],
    					'text'    => $location['name'] . ' - ' . $location['street'],
    					'title'   => '',
    					'image'   => '',
    					'default' => false
    			];
    		}
    	}

    	return $states;
    }
    
    public function setEntityFactory(EntityFactory $entityFactory)
    {
    	$this->entityFactory = $entityFactory;
    }
    
    public function setControllerHelper(ControllerHelper $controllerHelper)
    {
    	$this->controllerHelper = $controllerHelper;
    }
}
