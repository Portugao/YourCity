<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Helper;

use MU\YourCityModule\Helper\Base\AbstractListEntriesHelper;
use MU\YourCityModule\Entity\Factory\EntityFactory;
use MU\YourCityModule\Helper\ControllerHelper;

/**
 * Helper implementation class for list field entries related methods.
 */
class ListEntriesHelper extends AbstractListEntriesHelper
{
	/**
	 * @var ControllerHelper
	 */
	protected $controllerHelper;
	/**
	 * @var EntityFactory
	 */
	protected $entityFactory;
	
	/**
	 * Get 'part of city' list entries.
	 *
	 * @return array Array with desired list entries
	 */
	public function getPartOfCityEntriesForLocation()
	{
		$partRespository = $this->entityFactory->getRepository('part');
		$parts = $partRespository->findAll();
		
		$states = [];		
		
		foreach ($parts as $part) {

		$states[] = [
				'value'   => $part['name'],
				'text'    => $part['name'],
				'title'   => '',
				'image'   => '',
				'default' => false
		];
		}
	
		return $states;
	}
	
    /**
     * Get 'branch of location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getBranchOfLocationEntriesForLocation()
    {
    	$branchRespository = $this->entityFactory->getRepository('branch');
    	$branches = $branchRespository->findAll();
        $states = [];
        foreach ($branches as $branch) {
        $states[] = [
            'value'   => $branch['name'],
            'text'    => $branch['name'],
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        }
    
        return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForEvent()
    {
        $states = [];
        $states = $this->getLocations();
    
    	return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForOffer()
    {
    	$states = [];
    	$states[] = $this->getLocations();
    
    	return $states;
    }
    
    /**
     * Get 'my location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMyLocationEntriesForProduct()
    {
    	$states = [];
    	$states[] = $this->getLocations();
    	return $states;
    }
    
    /**
     * Get 'services of location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getServicesOfLocationEntriesForLocation()
    {
    	$states = [];
    	$serviceRepository = $this->entityFactory->getRepository('serviceOfLocation');
    	$services = $serviceRepository->findAll();
    	foreach ($services as $service) {
    		$states[] = [
    				'value'   => $service['name'],
    				'text'    => $service['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    
    	return $states;
    }
    
    /**
     * Get 'specials of location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getSpecialsOfLocationEntriesForLocation()
    {
    	$states = [];
    	$specialRepository = $this->entityFactory->getRepository('specialOfLocation');
    	$specials = $specialRepository->findAll();
    	foreach ($specials as $special) {
    		$states[] = [
    				'value'   => $special['name'],
    				'text'    => $special['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}    	
    
    	return $states;
    }
    
    /**
     * Get 'locations' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getLocations()
    {
    	$uid = $this->controllerHelper->getUid();
    	$locationRepository = $this->entityFactory->getRepository('location');
    	if ($uid != 2) {
    	$criteria = array('owner' => $uid);
    	$criteria2 = array('admin1' => $uid);
    	$criteria3 = array('admin2' => $uid);
    	$locations = $locationRepository->findBy($criteria);
    	$locations2 = $locationRepository->findBy($criteria2);
    	$locations3 = $locationRepository->findBy($criteria3);
    	$states = [];
    	foreach ($locations as $location) {
    		$states[] = [
    				'value'   => $location['id'],
    				'text'    => $location['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    	foreach ($locations2 as $location) {
    		$states[] = [
    				'value'   => $location['id'],
    				'text'    => $location['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    	foreach ($locations3 as $location) {
    		$states[] = [
    				'value'   => $location['id'],
    				'text'    => $location['name'],
    				'title'   => '',
    				'image'   => '',
    				'default' => false
    		];
    	}
    	} else {
    		$locations = $locationRepository->findAll();
    		foreach ($locations as $location) {
    			$states[] = [
    					'value'   => $location['id'],
    					'text'    => $location['name'],
    					'title'   => '',
    					'image'   => '',
    					'default' => false
    			];
    		}
    	}
    
    	return $states;
    }
    
    public function setEntityFactory(EntityFactory $entityFactory)
    {
    	$this->entityFactory = $entityFactory;
    }
    
    public function setControllerHelper(ControllerHelper $controllerHelper)
    {
    	$this->controllerHelper = $controllerHelper;
    }
}
