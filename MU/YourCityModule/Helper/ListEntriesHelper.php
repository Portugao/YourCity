<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Helper;

use MU\YourCityModule\Helper\Base\AbstractListEntriesHelper;
use MU\YourCityModule\Entity\Factory\EntityFactory;

/**
 * Helper implementation class for list field entries related methods.
 */
class ListEntriesHelper extends AbstractListEntriesHelper
{
	/**
	 * @var EntityFactory
	 */
	protected $entityFactory;
	
	/**
	 * Get 'part of city' list entries.
	 *
	 * @return array Array with desired list entries
	 */
	public function getPartOfCityEntriesForLocation()
	{
		$partRespository = $this->entityFactory->getRepository('part');
		$parts = $partRespository->findAll();
		
		$states = [];		
		
		foreach ($parts as $part) {

		$states[] = [
				'value'   => $part['name'],
				'text'    => $part['name'],
				'title'   => '',
				'image'   => '',
				'default' => false
		];
		}
	
		return $states;
	}
	
    /**
     * Get 'branch of location' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getBranchOfLocationEntriesForLocation()
    {
    	$branchRespository = $this->entityFactory->getRepository('branch');
    	$branches = $branchRespository->findAll();
        $states = [];
        foreach ($branches as $branch) {
        $states[] = [
            'value'   => $branch['name'],
            'text'    => $branch['name'],
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        }
    
        return $states;
    }
    
    public function setEntityFactory(EntityFactory $entityFactory)
    {
    	$this->entityFactory = $entityFactory;
    }
}
