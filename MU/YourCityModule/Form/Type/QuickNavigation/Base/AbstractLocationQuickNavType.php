<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Form\Type\QuickNavigation\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use MU\YourCityModule\Helper\FeatureActivationHelper;
use MU\YourCityModule\Helper\ListEntriesHelper;

/**
 * Location quick navigation form type base class.
 */
abstract class AbstractLocationQuickNavType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    /**
     * LocationQuickNavType constructor.
     *
     * @param TranslatorInterface $translator   Translator service instance
     * @param ListEntriesHelper   $listHelper   ListEntriesHelper service instance
     * @param FeatureActivationHelper $featureActivationHelper FeatureActivationHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        ListEntriesHelper $listHelper,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->setTranslator($translator);
        $this->listHelper = $listHelper;
        $this->featureActivationHelper = $featureActivationHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->setMethod('GET')
            ->add('all', 'Symfony\Component\Form\Extension\Core\Type\HiddenType')
            ->add('own', 'Symfony\Component\Form\Extension\Core\Type\HiddenType')
            ->add('tpl', 'Symfony\Component\Form\Extension\Core\Type\HiddenType')
        ;

        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, 'location')) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addListFields($builder, $options);
        $this->addUserFields($builder, $options);
        $this->addSearchField($builder, $options);
        $this->addSortingFields($builder, $options);
        $this->addAmountField($builder, $options);
        $this->addBooleanFields($builder, $options);
        $builder->add('updateview', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
            'label' => $this->__('OK'),
            'attr' => [
                'class' => 'btn btn-default btn-sm'
            ]
        ]);
    }

    /**
     * Adds a categories field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addCategoriesField(FormBuilderInterface $builder, array $options)
    {
        $objectType = 'location';
    
        $builder->add('categories', 'Zikula\CategoriesModule\Form\Type\CategoriesType', [
            'label' => $this->__('Categories'),
            'empty_data' => [],
            'attr' => [
                'class' => 'input-sm category-selector',
                'title' => $this->__('This is an optional filter.')
            ],
            'help' => $this->__('This is an optional filter.'),
            'required' => false,
            'multiple' => true,
            'module' => 'MUYourCityModule',
            'entity' => ucfirst($objectType) . 'Entity',
            'entityCategoryClass' => 'MU\YourCityModule\Entity\\' . ucfirst($objectType) . 'CategoryEntity'
        ]);
    }

    /**
     * Adds list fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListFields(FormBuilderInterface $builder, array $options)
    {
        $listEntries = $this->listHelper->getEntries('location', 'workflowState');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('workflowState', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('State'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => $choices,
            'choices_as_values' => true,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds user fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addUserFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('owner', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'label' => $this->__('Owner'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            // Zikula core should provide a form type for this to hide entity details
            'class' => 'Zikula\UsersModule\Entity\UserEntity',
            'choice_label' => 'uname'
        ]);
        $builder->add('admin1', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'label' => $this->__('Admin 1'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            // Zikula core should provide a form type for this to hide entity details
            'class' => 'Zikula\UsersModule\Entity\UserEntity',
            'choice_label' => 'uname'
        ]);
        $builder->add('admin2', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'label' => $this->__('Admin 2'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            // Zikula core should provide a form type for this to hide entity details
            'class' => 'Zikula\UsersModule\Entity\UserEntity',
            'choice_label' => 'uname'
        ]);
    }

    /**
     * Adds a search field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSearchField(FormBuilderInterface $builder, array $options)
    {
        $builder->add('q', 'Symfony\Component\Form\Extension\Core\Type\SearchType', [
            'label' => $this->__('Search'),
            'attr' => [
                'maxlength' => 255,
                'class' => 'input-sm'
            ],
            'required' => false
        ]);
    }


    /**
     * Adds sorting fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSortingFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('sort', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Sort by'),
                'attr' => [
                    'class' => 'input-sm'
                ],
                'choices' =>             [
                    $this->__('Workflow state') => 'workflowState',
                    $this->__('Name') => 'name',
                    $this->__('Logo of your location') => 'logoOfYourLocation',
                    $this->__('Description') => 'description',
                    $this->__('Description 2') => 'description2',
                    $this->__('Image of location') => 'imageOfLocation',
                    $this->__('Street') => 'street',
                    $this->__('Number of street') => 'numberOfStreet',
                    $this->__('Zip code') => 'zipCode',
                    $this->__('City') => 'city',
                    $this->__('Telefon') => 'telefon',
                    $this->__('Mobil') => 'mobil',
                    $this->__('Homepage') => 'homepage',
                    $this->__('Opening hours') => 'openingHours',
                    $this->__('Start on monday') => 'startOnMonday',
                    $this->__('End on monday') => 'endOnMonday',
                    $this->__('Start 2 on monday') => 'start2OnMonday',
                    $this->__('End 2 on monday') => 'end2OnMonday',
                    $this->__('Start on tuesday') => 'startOnTuesday',
                    $this->__('End on tuesday') => 'endOnTuesday',
                    $this->__('Start 2 on tuesday') => 'start2OnTuesday',
                    $this->__('End 2 on tuesday') => 'end2OnTuesday',
                    $this->__('Start on wednesday') => 'startOnWednesday',
                    $this->__('End on wednesday') => 'endOnWednesday',
                    $this->__('Start 2 on wednesday') => 'start2OnWednesday',
                    $this->__('End 2 on wednesday') => 'end2OnWednesday',
                    $this->__('Start on thursday') => 'startOnThursday',
                    $this->__('End on thursday') => 'endOnThursday',
                    $this->__('Start 2 on thursday') => 'start2OnThursday',
                    $this->__('End 2 on thursday') => 'end2OnThursday',
                    $this->__('Start on friday') => 'startOnFriday',
                    $this->__('End on friday') => 'endOnFriday',
                    $this->__('Start 2 on friday') => 'start2OnFriday',
                    $this->__('End 2 on friday') => 'end2OnFriday',
                    $this->__('Start on saturday') => 'startOnSaturday',
                    $this->__('End on saturday') => 'endOnSaturday',
                    $this->__('Star 2t on saturday') => 'star2tOnSaturday',
                    $this->__('End 2 on saturday') => 'end2OnSaturday',
                    $this->__('Start on sunday') => 'startOnSunday',
                    $this->__('End on sunday') => 'endOnSunday',
                    $this->__('Start 2 on sunday') => 'start2OnSunday',
                    $this->__('End 2 on sunday') => 'end2OnSunday',
                    $this->__('Creation date') => 'createdDate',
                    $this->__('Creator') => 'createdBy',
                    $this->__('Update date') => 'updatedDate',
                    $this->__('Updater') => 'updatedBy'
                ],
                'choices_as_values' => true,
                'required' => true,
                'expanded' => false
            ])
            ->add('sortdir', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Sort direction'),
                'empty_data' => 'asc',
                'attr' => [
                    'class' => 'input-sm'
                ],
                'choices' => [
                    $this->__('Ascending') => 'asc',
                    $this->__('Descending') => 'desc'
                ],
                'choices_as_values' => true,
                'required' => true,
                'expanded' => false
            ])
        ;
    }

    /**
     * Adds a page size field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addAmountField(FormBuilderInterface $builder, array $options)
    {
        $builder->add('num', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Page size'),
            'empty_data' => 20,
            'attr' => [
                'class' => 'input-sm text-right'
            ],
            'choices' => [
                $this->__('5') => 5,
                $this->__('10') => 10,
                $this->__('15') => 15,
                $this->__('20') => 20,
                $this->__('30') => 30,
                $this->__('50') => 50,
                $this->__('100') => 100
            ],
            'choices_as_values' => true,
            'required' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds boolean fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addBooleanFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('closedForEver', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed for ever'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('agreement', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Agreement'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('unclearTimes', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Unclear times'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnMonday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on monday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnTuesday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on tuesday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnWednesday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on wednesday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnThursday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on thursday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnFriday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on friday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnSaturday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on saturday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
        $builder->add('closedOnSunday', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Closed on sunday'),
            'attr' => [
                'class' => 'input-sm'
            ],
            'required' => false,
            'placeholder' => $this->__('All'),
            'choices' => [
                $this->__('No') => 'no',
                $this->__('Yes') => 'yes'
            ],
            'choices_as_values' => true
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'muyourcitymodule_locationquicknav';
    }
}
