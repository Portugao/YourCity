<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Form\Type\Base;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TimeType;
use Symfony\Component\Form\Extension\Core\Type\UrlType;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use MU\YourCityModule\Entity\Factory\EntityFactory;
use MU\YourCityModule\Form\Type\Field\GeoType;
use MU\YourCityModule\Form\Type\Field\TranslationType;
use MU\YourCityModule\Form\Type\Field\UploadType;
use MU\YourCityModule\Form\Type\Field\UserType;
use MU\YourCityModule\Helper\CollectionFilterHelper;
use MU\YourCityModule\Helper\EntityDisplayHelper;
use MU\YourCityModule\Helper\FeatureActivationHelper;
use MU\YourCityModule\Helper\ListEntriesHelper;
use MU\YourCityModule\Helper\TranslatableHelper;

/**
 * Location editing form type base class.
 */
abstract class AbstractLocationType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var CollectionFilterHelper
     */
    protected $collectionFilterHelper;

    /**
     * @var EntityDisplayHelper
     */
    protected $entityDisplayHelper;

    /**
     * @var VariableApiInterface
     */
    protected $variableApi;

    /**
     * @var TranslatableHelper
     */
    protected $translatableHelper;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    /**
     * LocationType constructor.
     *
     * @param TranslatorInterface $translator     Translator service instance
     * @param EntityFactory       $entityFactory EntityFactory service instance
     * @param CollectionFilterHelper $collectionFilterHelper CollectionFilterHelper service instance
     * @param EntityDisplayHelper $entityDisplayHelper EntityDisplayHelper service instance
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param TranslatableHelper  $translatableHelper TranslatableHelper service instance
     * @param ListEntriesHelper   $listHelper     ListEntriesHelper service instance
     * @param FeatureActivationHelper $featureActivationHelper FeatureActivationHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory,
        CollectionFilterHelper $collectionFilterHelper,
        EntityDisplayHelper $entityDisplayHelper,
        VariableApiInterface $variableApi,
        TranslatableHelper $translatableHelper,
        ListEntriesHelper $listHelper,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
        $this->collectionFilterHelper = $collectionFilterHelper;
        $this->entityDisplayHelper = $entityDisplayHelper;
        $this->variableApi = $variableApi;
        $this->translatableHelper = $translatableHelper;
        $this->listHelper = $listHelper;
        $this->featureActivationHelper = $featureActivationHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        $this->addOutgoingRelationshipFields($builder, $options);
        $this->addAdditionalNotificationRemarksField($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addReturnControlField($builder, $options);
        $this->addSubmitButtons($builder, $options);

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {
            $entity = $event->getData();
            foreach (['logoOfYourLocation', 'imageOfLocation'] as $uploadFieldName) {
                $entity[$uploadFieldName] = [
                    $uploadFieldName => $entity[$uploadFieldName] instanceof File ? $entity[$uploadFieldName]->getPathname() : null
                ];
            }
        });
        $builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
            $entity = $event->getData();
            foreach (['logoOfYourLocation', 'imageOfLocation'] as $uploadFieldName) {
                if (is_array($entity[$uploadFieldName])) {
                    $entity[$uploadFieldName] = $entity[$uploadFieldName][$uploadFieldName];
                }
            }
        });
    }

    /**
     * Adds basic entity fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options)
    {
        
        $builder->add('slogan', TextType::class, [
            'label' => $this->__('Slogan') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Slogan or additional name of your company.')
            ],
            'help' => $this->__('Slogan or additional name of your company.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the slogan of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('descriptionForGoogle', TextType::class, [
            'label' => $this->__('Description for google') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Enter the description for google and Co.
                Only 170 characters are allowed.')
            ],
            'help' => $this->__('Enter the description for google and Co.
            Only 170 characters are allowed.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 170,
                'class' => '',
                'title' => $this->__('Enter the description for google of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('description', TextareaType::class, [
            'label' => $this->__('Description') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Enter a description of your location (company) and your products.
                Maximum 2000 characters.')
            ],
            'help' => $this->__('Enter a description of your location (company) and your products.
            Maximum 2000 characters.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 2000,
                'class' => '',
                'title' => $this->__('Enter the description of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('description2', TextareaType::class, [
            'label' => $this->__('Description 2') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Maximum 2000 characters.
                Premium option.')
            ],
            'help' => $this->__('Maximum 2000 characters.
            Premium option.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 2000,
                'class' => '',
                'title' => $this->__('Enter the description 2 of the location')
            ],
            'required' => false,
        ]);
        
        if ($this->variableApi->getSystemVar('multilingual') && $this->featureActivationHelper->isEnabled(FeatureActivationHelper::TRANSLATIONS, 'location')) {
            $supportedLanguages = $this->translatableHelper->getSupportedLanguages('location');
            if (is_array($supportedLanguages) && count($supportedLanguages) > 1) {
                $currentLanguage = $this->translatableHelper->getCurrentLanguage();
                $translatableFields = $this->translatableHelper->getTranslatableFields('location');
                $mandatoryFields = $this->translatableHelper->getMandatoryFields('location');
                foreach ($supportedLanguages as $language) {
                    if ($language == $currentLanguage) {
                        continue;
                    }
                    $builder->add('translations' . $language, TranslationType::class, [
                        'fields' => $translatableFields,
                        'mandatory_fields' => $mandatoryFields[$language],
                        'values' => isset($options['translations'][$language]) ? $options['translations'][$language] : []
                    ]);
                }
            }
        }
        
        $builder->add('name', TextType::class, [
            'label' => $this->__('Name') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Enter the name of your company. If your company is registered somewhere, enter the exact name.')
            ],
            'help' => $this->__('Enter the name of your company. If your company is registered somewhere, enter the exact name.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the name of the location')
            ],
            'required' => true,
        ]);
        
        $builder->add('letterForOrder', TextType::class, [
            'label' => $this->__('Letter for order') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Enter the letter for ordering of the location.')
            ],
            'help' => $this->__('Enter the letter for ordering of the location.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the letter for order of the location')
            ],
            'required' => true,
        ]);
        
        $builder->add('logoOfYourLocation', UploadType::class, [
            'label' => $this->__('Logo of your location') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('If your location has a logo, you can upload it here.')
            ],
            'help' => $this->__('If your location has a logo, you can upload it here.'),
            'attr' => [
                'class' => ' validate-upload',
                'title' => $this->__('Enter the logo of your location of the location')
            ],
            'required' => false && $options['mode'] == 'create',
            'entity' => $options['entity'],
            'allowed_extensions' => 'gif, jpeg, jpg, png',
            'allowed_size' => '100k'
        ]);
        
        $builder->add('imageOfLocation', UploadType::class, [
            'label' => $this->__('Image of location') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Here you can upload an image, that represents your company.')
            ],
            'help' => $this->__('Here you can upload an image, that represents your company.'),
            'attr' => [
                'class' => ' validate-upload',
                'title' => $this->__('Enter the image of location of the location')
            ],
            'required' => false && $options['mode'] == 'create',
            'entity' => $options['entity'],
            'allowed_extensions' => 'gif, jpeg, jpg, png',
            'allowed_size' => ''
        ]);
        
        $builder->add('street', TextType::class, [
            'label' => $this->__('Street') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the street of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('numberOfStreet', TextType::class, [
            'label' => $this->__('Number of street') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the number of street of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('zipCode', TextType::class, [
            'label' => $this->__('Zip code') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the zip code of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('city', TextType::class, [
            'label' => $this->__('City') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the city of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('telefon', TextType::class, [
            'label' => $this->__('Telefon') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the telefon of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('mobil', TextType::class, [
            'label' => $this->__('Mobil') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the mobil of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('homepage', UrlType::class, [
            'label' => $this->__('Homepage') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => ' validate-url',
                'title' => $this->__('Enter the homepage of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('bsagStop', TextType::class, [
            'label' => $this->__('Bsag stop') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the bsag stop of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('tram', TextType::class, [
            'label' => $this->__('Tram') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the tram of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('bus', TextType::class, [
            'label' => $this->__('Bus') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the bus of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('closedForEver', CheckboxType::class, [
            'label' => $this->__('Closed for ever') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed for ever ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('agreement', CheckboxType::class, [
            'label' => $this->__('Agreement') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('agreement ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('unclearTimes', CheckboxType::class, [
            'label' => $this->__('Unclear times') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('unclear times ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('openingHours', TextareaType::class, [
            'label' => $this->__('Opening hours') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Make extended informations about the opening hours!')
            ],
            'help' => $this->__('Make extended informations about the opening hours!'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 2000,
                'class' => '',
                'title' => $this->__('Enter the opening hours of the location')
            ],
            'required' => false,
        ]);
        
        $builder->add('closedOnMonday', CheckboxType::class, [
            'label' => $this->__('Closed on monday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on monday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnMonday', TimeType::class, [
            'label' => $this->__('Start on monday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on monday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnMonday', TimeType::class, [
            'label' => $this->__('End on monday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on monday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnMonday', TimeType::class, [
            'label' => $this->__('Start 2 on monday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on monday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnMonday', TimeType::class, [
            'label' => $this->__('End 2 on monday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on monday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('closedOnTuesday', CheckboxType::class, [
            'label' => $this->__('Closed on tuesday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on tuesday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnTuesday', TimeType::class, [
            'label' => $this->__('Start on tuesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on tuesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnTuesday', TimeType::class, [
            'label' => $this->__('End on tuesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on tuesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnTuesday', TimeType::class, [
            'label' => $this->__('Start 2 on tuesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on tuesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnTuesday', TimeType::class, [
            'label' => $this->__('End 2 on tuesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on tuesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('closedOnWednesday', CheckboxType::class, [
            'label' => $this->__('Closed on wednesday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on wednesday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnWednesday', TimeType::class, [
            'label' => $this->__('Start on wednesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on wednesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnWednesday', TimeType::class, [
            'label' => $this->__('End on wednesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on wednesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnWednesday', TimeType::class, [
            'label' => $this->__('Start 2 on wednesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on wednesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnWednesday', TimeType::class, [
            'label' => $this->__('End 2 on wednesday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on wednesday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('closedOnThursday', CheckboxType::class, [
            'label' => $this->__('Closed on thursday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on thursday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnThursday', TimeType::class, [
            'label' => $this->__('Start on thursday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on thursday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnThursday', TimeType::class, [
            'label' => $this->__('End on thursday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on thursday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnThursday', TimeType::class, [
            'label' => $this->__('Start 2 on thursday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on thursday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnThursday', TimeType::class, [
            'label' => $this->__('End 2 on thursday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on thursday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('closedOnFriday', CheckboxType::class, [
            'label' => $this->__('Closed on friday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on friday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnFriday', TimeType::class, [
            'label' => $this->__('Start on friday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on friday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnFriday', TimeType::class, [
            'label' => $this->__('End on friday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on friday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnFriday', TimeType::class, [
            'label' => $this->__('Start 2 on friday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on friday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnFriday', TimeType::class, [
            'label' => $this->__('End 2 on friday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on friday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('closedOnSaturday', CheckboxType::class, [
            'label' => $this->__('Closed on saturday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on saturday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnSaturday', TimeType::class, [
            'label' => $this->__('Start on saturday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on saturday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnSaturday', TimeType::class, [
            'label' => $this->__('End on saturday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on saturday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnSaturday', TimeType::class, [
            'label' => $this->__('Start 2 on saturday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on saturday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnSaturday', TimeType::class, [
            'label' => $this->__('End 2 on saturday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on saturday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('closedOnSunday', CheckboxType::class, [
            'label' => $this->__('Closed on sunday') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('closed on sunday ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('startOnSunday', TimeType::class, [
            'label' => $this->__('Start on sunday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start on sunday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('endOnSunday', TimeType::class, [
            'label' => $this->__('End on sunday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end on sunday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('start2OnSunday', TimeType::class, [
            'label' => $this->__('Start 2 on sunday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the start 2 on sunday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('end2OnSunday', TimeType::class, [
            'label' => $this->__('End 2 on sunday') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 8,
                'class' => '',
                'title' => $this->__('Enter the end 2 on sunday of the location')
            ],
            'required' => false,
            'empty_data' => '',
            'widget' => 'single_text'
        ]);
        
        $builder->add('owner', UserType::class, [
            'label' => $this->__('Owner') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 11,
                'class' => ' validate-digits',
                'title' => $this->__('Enter the owner of the location')
            ],
            'required' => false,
            'inline_usage' => $options['inline_usage']
        ]);
        
        $builder->add('admin1', UserType::class, [
            'label' => $this->__('Admin 1') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 11,
                'class' => ' validate-digits',
                'title' => $this->__('Enter the admin 1 of the location')
            ],
            'required' => false,
            'inline_usage' => $options['inline_usage']
        ]);
        
        $builder->add('admin2', UserType::class, [
            'label' => $this->__('Admin 2') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 11,
                'class' => ' validate-digits',
                'title' => $this->__('Enter the admin 2 of the location')
            ],
            'required' => false,
            'inline_usage' => $options['inline_usage']
        ]);
        
        $this->addGeographicalFields($builder, $options);
    }

    /**
     * Adds fields for coordinates.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeographicalFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('latitude', GeoType::class, [
            'label' => $this->__('Latitude') . ':',
            'attr' => [
                'class' => 'validate-number'
            ],
            'required' => false
        ]);
        $builder->add('longitude', GeoType::class, [
            'label' => $this->__('Longitude') . ':',
            'attr' => [
                'class' => 'validate-number'
            ],
            'required' => false
        ]);
    }

    /**
     * Adds fields for outgoing relationships.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addOutgoingRelationshipFields(FormBuilderInterface $builder, array $options)
    {
        $queryBuilder = function(EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('branches', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUYourCityModule:BranchEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => true,
            'expanded' => true,
            'query_builder' => $queryBuilder,
            'required' => false,
            'label' => $this->__('Branches'),
            'label_attr' => [
                'class' => 'checkbox-inline'
            ],
            'attr' => [
                'title' => $this->__('Choose the branches')
            ]
        ]);
        $queryBuilder = function(EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('parts', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUYourCityModule:PartEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => true,
            'expanded' => false,
            'query_builder' => $queryBuilder,
            'required' => false,
            'label' => $this->__('Parts'),
            'attr' => [
                'title' => $this->__('Choose the parts')
            ]
        ]);
        $queryBuilder = function(EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('specialsOfLocation', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUYourCityModule:SpecialOfLocationEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => true,
            'expanded' => true,
            'query_builder' => $queryBuilder,
            'required' => false,
            'label' => $this->__('Specials of location'),
            'label_attr' => [
                'class' => 'checkbox-inline'
            ],
            'attr' => [
                'title' => $this->__('Choose the specials of location')
            ]
        ]);
        $queryBuilder = function(EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('servicesOfLocation', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUYourCityModule:ServiceOfLocationEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => true,
            'expanded' => true,
            'query_builder' => $queryBuilder,
            'required' => false,
            'label' => $this->__('Services of location'),
            'label_attr' => [
                'class' => 'checkbox-inline'
            ],
            'attr' => [
                'title' => $this->__('Choose the services of location')
            ]
        ]);
    }

    /**
     * Adds a field for additional notification remarks.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addAdditionalNotificationRemarksField(FormBuilderInterface $builder, array $options)
    {
        $helpText = '';
        if ($options['is_moderator']) {
            $helpText = $this->__('These remarks (like a reason for deny) are not stored, but added to any notification emails send to the creator.');
        } elseif ($options['is_creator']) {
            $helpText = $this->__('These remarks (like questions about conformance) are not stored, but added to any notification emails send to our moderators.');
        }
    
        $builder->add('additionalNotificationRemarks', TextareaType::class, [
            'mapped' => false,
            'label' => $this->__('Additional remarks'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $helpText
            ],
            'attr' => [
                'title' => $options['mode'] == 'create' ? $this->__('Enter any additions about your content') : $this->__('Enter any additions about your changes')
            ],
            'required' => false,
            'help' => $helpText
        ]);
    }

    /**
     * Adds special fields for moderators.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options)
    {
        if (!$options['has_moderate_permission']) {
            return;
        }
    
        $builder->add('moderationSpecificCreator', UserType::class, [
            'mapped' => false,
            'label' => $this->__('Creator') . ':',
            'attr' => [
                'maxlength' => 11,
                'class' => ' validate-digits',
                'title' => $this->__('Here you can choose a user which will be set as creator')
            ],
            'empty_data' => 0,
            'required' => false,
            'help' => $this->__('Here you can choose a user which will be set as creator')
        ]);
        $builder->add('moderationSpecificCreationDate', DateTimeType::class, [
            'mapped' => false,
            'label' => $this->__('Creation date') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('Here you can choose a custom creation date')
            ],
            'empty_data' => '',
            'required' => false,
            'with_seconds' => true,
            'date_widget' => 'single_text',
            'time_widget' => 'single_text',
            'help' => $this->__('Here you can choose a custom creation date')
        ]);
    }

    /**
     * Adds the return control field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addReturnControlField(FormBuilderInterface $builder, array $options)
    {
        if ($options['mode'] != 'create') {
            return;
        }
        $builder->add('repeatCreation', CheckboxType::class, [
            'mapped' => false,
            'label' => $this->__('Create another item after save'),
            'required' => false
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options)
    {
        foreach ($options['actions'] as $action) {
            $builder->add($action['id'], SubmitType::class, [
                'label' => $action['title'],
                'icon' => ($action['id'] == 'delete' ? 'fa-trash-o' : ''),
                'attr' => [
                    'class' => $action['buttonClass']
                ]
            ]);
        }
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'muyourcitymodule_location';
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data (required for embedding forms)
                'data_class' => 'MU\YourCityModule\Entity\LocationEntity',
                'empty_data' => function (FormInterface $form) {
                    return $this->entityFactory->createLocation();
                },
                'error_mapping' => [
                    'isOwnerUserValid' => 'owner',
                    'isAdmin1UserValid' => 'admin1',
                    'isAdmin2UserValid' => 'admin2',
                    'logoOfYourLocation' => 'logoOfYourLocation.logoOfYourLocation',
                    'imageOfLocation' => 'imageOfLocation.imageOfLocation',
                ],
                'mode' => 'create',
                'is_moderator' => false,
                'is_creator' => false,
                'actions' => [],
                'has_moderate_permission' => false,
                'translations' => [],
                'filter_by_ownership' => true,
                'inline_usage' => false
            ])
            ->setRequired(['entity', 'mode', 'actions'])
            ->setAllowedTypes([
                'mode' => 'string',
                'is_moderator' => 'bool',
                'is_creator' => 'bool',
                'actions' => 'array',
                'has_moderate_permission' => 'bool',
                'translations' => 'array',
                'filter_by_ownership' => 'bool',
                'inline_usage' => 'bool'
            ])
            ->setAllowedValues([
                'mode' => ['create', 'edit']
            ])
        ;
    }
}
