<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\YourCityModule\Base;

use Doctrine\DBAL\Connection;
use RuntimeException;
use Zikula\Core\AbstractExtensionInstaller;

/**
 * Installer base class.
 */
abstract class AbstractYourCityModuleInstaller extends AbstractExtensionInstaller
{
    /**
     * Install the MUYourCityModule application.
     *
     * @return boolean True on success, or false
     *
     * @throws RuntimeException Thrown if database tables can not be created or another error occurs
     */
    public function install()
    {
        $logger = $this->container->get('logger');
        $userName = $this->container->get('zikula_users_module.current_user')->get('uname');
    
        // Check if upload directories exist and if needed create them
        try {
            $container = $this->container;
            $uploadHelper = new \MU\YourCityModule\Helper\UploadHelper($container->get('translator.default'), $container->get('session'), $container->get('logger'), $container->get('zikula_users_module.current_user'), $container->get('zikula_extensions_module.api.variable'), $container->getParameter('datadir'));
            $uploadHelper->checkAndCreateAllUploadFolders();
        } catch (\Exception $exception) {
            $this->addFlash('error', $exception->getMessage());
            $logger->error('{app}: User {user} could not create upload folders during installation. Error details: {errorMessage}.', ['app' => 'MUYourCityModule', 'user' => $userName, 'errorMessage' => $exception->getMessage()]);
        
            return false;
        }
        // create all tables from according entity definitions
        try {
            $this->schemaTool->create($this->listEntityClasses());
        } catch (\Exception $exception) {
            $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
            $logger->error('{app}: Could not create the database tables during installation. Error details: {errorMessage}.', ['app' => 'MUYourCityModule', 'errorMessage' => $exception->getMessage()]);
    
            return false;
        }
    
        // set up all our vars with initial values
        $this->setVar('city', 'Bremen');
        $this->setVar('standardZipCode', '28195');
        $this->setVar('areaCode', '0421');
        $this->setVar('locationIds', '');
        $this->setVar('branchLocationIds', '');
        $this->setVar('partLocationIds', '');
        $this->setVar('serviceLocationIds', '');
        $this->setVar('specialLocationIds', '');
        $this->setVar('moderationGroupForLocations', '2');
        $this->setVar('branchEntriesPerPage', '10');
        $this->setVar('linkOwnBranchesOnAccountPage', true);
        $this->setVar('locationEntriesPerPage', '10');
        $this->setVar('linkOwnLocationsOnAccountPage', true);
        $this->setVar('partEntriesPerPage', '10');
        $this->setVar('linkOwnPartsOnAccountPage', true);
        $this->setVar('offerEntriesPerPage', '10');
        $this->setVar('linkOwnOffersOnAccountPage', true);
        $this->setVar('menuOfLocationEntriesPerPage', '10');
        $this->setVar('linkOwnMenusOfLocationOnAccountPage', true);
        $this->setVar('partOfMenuEntriesPerPage', '10');
        $this->setVar('linkOwnPartsOfMenuOnAccountPage', true);
        $this->setVar('dishEntriesPerPage', '10');
        $this->setVar('linkOwnDishesOnAccountPage', true);
        $this->setVar('eventEntriesPerPage', '10');
        $this->setVar('linkOwnEventsOnAccountPage', true);
        $this->setVar('productEntriesPerPage', '10');
        $this->setVar('linkOwnProductsOnAccountPage', true);
        $this->setVar('specialOfLocationEntriesPerPage', '10');
        $this->setVar('linkOwnSpecialsOfLocationOnAccountPage', true);
        $this->setVar('serviceOfLocationEntriesPerPage', '10');
        $this->setVar('linkOwnServicesOfLocationOnAccountPage', true);
        $this->setVar('abonnementEntriesPerPage', '10');
        $this->setVar('linkOwnAbonnementsOnAccountPage', true);
        $this->setVar('enableShrinkingForBranchImageOfBranch', false);
        $this->setVar('shrinkWidthBranchImageOfBranch', '800');
        $this->setVar('shrinkHeightBranchImageOfBranch', '600');
        $this->setVar('thumbnailModeBranchImageOfBranch',  'inset' );
        $this->setVar('thumbnailWidthBranchImageOfBranchView', '32');
        $this->setVar('thumbnailHeightBranchImageOfBranchView', '24');
        $this->setVar('thumbnailWidthBranchImageOfBranchDisplay', '240');
        $this->setVar('thumbnailHeightBranchImageOfBranchDisplay', '180');
        $this->setVar('thumbnailWidthBranchImageOfBranchEdit', '240');
        $this->setVar('thumbnailHeightBranchImageOfBranchEdit', '180');
        $this->setVar('enableShrinkingForLocationLogoOfYourLocation', false);
        $this->setVar('shrinkWidthLocationLogoOfYourLocation', '800');
        $this->setVar('shrinkHeightLocationLogoOfYourLocation', '600');
        $this->setVar('thumbnailModeLocationLogoOfYourLocation',  'inset' );
        $this->setVar('thumbnailWidthLocationLogoOfYourLocationView', '32');
        $this->setVar('thumbnailHeightLocationLogoOfYourLocationView', '24');
        $this->setVar('thumbnailWidthLocationLogoOfYourLocationDisplay', '240');
        $this->setVar('thumbnailHeightLocationLogoOfYourLocationDisplay', '180');
        $this->setVar('thumbnailWidthLocationLogoOfYourLocationEdit', '240');
        $this->setVar('thumbnailHeightLocationLogoOfYourLocationEdit', '180');
        $this->setVar('enableShrinkingForLocationImageOfLocation', false);
        $this->setVar('shrinkWidthLocationImageOfLocation', '800');
        $this->setVar('shrinkHeightLocationImageOfLocation', '600');
        $this->setVar('thumbnailModeLocationImageOfLocation',  'inset' );
        $this->setVar('thumbnailWidthLocationImageOfLocationView', '32');
        $this->setVar('thumbnailHeightLocationImageOfLocationView', '24');
        $this->setVar('thumbnailWidthLocationImageOfLocationDisplay', '240');
        $this->setVar('thumbnailHeightLocationImageOfLocationDisplay', '180');
        $this->setVar('thumbnailWidthLocationImageOfLocationEdit', '240');
        $this->setVar('thumbnailHeightLocationImageOfLocationEdit', '180');
        $this->setVar('enableShrinkingForLocationFirstImage', false);
        $this->setVar('shrinkWidthLocationFirstImage', '800');
        $this->setVar('shrinkHeightLocationFirstImage', '600');
        $this->setVar('thumbnailModeLocationFirstImage',  'inset' );
        $this->setVar('thumbnailWidthLocationFirstImageView', '32');
        $this->setVar('thumbnailHeightLocationFirstImageView', '24');
        $this->setVar('thumbnailWidthLocationFirstImageDisplay', '240');
        $this->setVar('thumbnailHeightLocationFirstImageDisplay', '180');
        $this->setVar('thumbnailWidthLocationFirstImageEdit', '240');
        $this->setVar('thumbnailHeightLocationFirstImageEdit', '180');
        $this->setVar('enableShrinkingForLocationSecondImage', false);
        $this->setVar('shrinkWidthLocationSecondImage', '800');
        $this->setVar('shrinkHeightLocationSecondImage', '600');
        $this->setVar('thumbnailModeLocationSecondImage',  'inset' );
        $this->setVar('thumbnailWidthLocationSecondImageView', '32');
        $this->setVar('thumbnailHeightLocationSecondImageView', '24');
        $this->setVar('thumbnailWidthLocationSecondImageDisplay', '240');
        $this->setVar('thumbnailHeightLocationSecondImageDisplay', '180');
        $this->setVar('thumbnailWidthLocationSecondImageEdit', '240');
        $this->setVar('thumbnailHeightLocationSecondImageEdit', '180');
        $this->setVar('enableShrinkingForLocationThirdImage', false);
        $this->setVar('shrinkWidthLocationThirdImage', '800');
        $this->setVar('shrinkHeightLocationThirdImage', '600');
        $this->setVar('thumbnailModeLocationThirdImage',  'inset' );
        $this->setVar('thumbnailWidthLocationThirdImageView', '32');
        $this->setVar('thumbnailHeightLocationThirdImageView', '24');
        $this->setVar('thumbnailWidthLocationThirdImageDisplay', '240');
        $this->setVar('thumbnailHeightLocationThirdImageDisplay', '180');
        $this->setVar('thumbnailWidthLocationThirdImageEdit', '240');
        $this->setVar('thumbnailHeightLocationThirdImageEdit', '180');
        $this->setVar('enableShrinkingForLocationFourthImage', false);
        $this->setVar('shrinkWidthLocationFourthImage', '800');
        $this->setVar('shrinkHeightLocationFourthImage', '600');
        $this->setVar('thumbnailModeLocationFourthImage',  'inset' );
        $this->setVar('thumbnailWidthLocationFourthImageView', '32');
        $this->setVar('thumbnailHeightLocationFourthImageView', '24');
        $this->setVar('thumbnailWidthLocationFourthImageDisplay', '240');
        $this->setVar('thumbnailHeightLocationFourthImageDisplay', '180');
        $this->setVar('thumbnailWidthLocationFourthImageEdit', '240');
        $this->setVar('thumbnailHeightLocationFourthImageEdit', '180');
        $this->setVar('enableShrinkingForLocationFifthImage', false);
        $this->setVar('shrinkWidthLocationFifthImage', '800');
        $this->setVar('shrinkHeightLocationFifthImage', '600');
        $this->setVar('thumbnailModeLocationFifthImage',  'inset' );
        $this->setVar('thumbnailWidthLocationFifthImageView', '32');
        $this->setVar('thumbnailHeightLocationFifthImageView', '24');
        $this->setVar('thumbnailWidthLocationFifthImageDisplay', '240');
        $this->setVar('thumbnailHeightLocationFifthImageDisplay', '180');
        $this->setVar('thumbnailWidthLocationFifthImageEdit', '240');
        $this->setVar('thumbnailHeightLocationFifthImageEdit', '180');
        $this->setVar('enableShrinkingForLocationSixthImage', false);
        $this->setVar('shrinkWidthLocationSixthImage', '800');
        $this->setVar('shrinkHeightLocationSixthImage', '600');
        $this->setVar('thumbnailModeLocationSixthImage',  'inset' );
        $this->setVar('thumbnailWidthLocationSixthImageView', '32');
        $this->setVar('thumbnailHeightLocationSixthImageView', '24');
        $this->setVar('thumbnailWidthLocationSixthImageDisplay', '240');
        $this->setVar('thumbnailHeightLocationSixthImageDisplay', '180');
        $this->setVar('thumbnailWidthLocationSixthImageEdit', '240');
        $this->setVar('thumbnailHeightLocationSixthImageEdit', '180');
        $this->setVar('enableShrinkingForPartImageOfPart', false);
        $this->setVar('shrinkWidthPartImageOfPart', '800');
        $this->setVar('shrinkHeightPartImageOfPart', '600');
        $this->setVar('thumbnailModePartImageOfPart',  'inset' );
        $this->setVar('thumbnailWidthPartImageOfPartView', '32');
        $this->setVar('thumbnailHeightPartImageOfPartView', '24');
        $this->setVar('thumbnailWidthPartImageOfPartDisplay', '240');
        $this->setVar('thumbnailHeightPartImageOfPartDisplay', '180');
        $this->setVar('thumbnailWidthPartImageOfPartEdit', '240');
        $this->setVar('thumbnailHeightPartImageOfPartEdit', '180');
        $this->setVar('enableShrinkingForOfferImageOfOffer', false);
        $this->setVar('shrinkWidthOfferImageOfOffer', '800');
        $this->setVar('shrinkHeightOfferImageOfOffer', '600');
        $this->setVar('thumbnailModeOfferImageOfOffer',  'inset' );
        $this->setVar('thumbnailWidthOfferImageOfOfferView', '32');
        $this->setVar('thumbnailHeightOfferImageOfOfferView', '24');
        $this->setVar('thumbnailWidthOfferImageOfOfferDisplay', '240');
        $this->setVar('thumbnailHeightOfferImageOfOfferDisplay', '180');
        $this->setVar('thumbnailWidthOfferImageOfOfferEdit', '240');
        $this->setVar('thumbnailHeightOfferImageOfOfferEdit', '180');
        $this->setVar('enableShrinkingForMenuOfLocationImageOfMenu', false);
        $this->setVar('shrinkWidthMenuOfLocationImageOfMenu', '800');
        $this->setVar('shrinkHeightMenuOfLocationImageOfMenu', '600');
        $this->setVar('thumbnailModeMenuOfLocationImageOfMenu',  'inset' );
        $this->setVar('thumbnailWidthMenuOfLocationImageOfMenuView', '32');
        $this->setVar('thumbnailHeightMenuOfLocationImageOfMenuView', '24');
        $this->setVar('thumbnailWidthMenuOfLocationImageOfMenuDisplay', '240');
        $this->setVar('thumbnailHeightMenuOfLocationImageOfMenuDisplay', '180');
        $this->setVar('thumbnailWidthMenuOfLocationImageOfMenuEdit', '240');
        $this->setVar('thumbnailHeightMenuOfLocationImageOfMenuEdit', '180');
        $this->setVar('enableShrinkingForDishImageOfDish', false);
        $this->setVar('shrinkWidthDishImageOfDish', '800');
        $this->setVar('shrinkHeightDishImageOfDish', '600');
        $this->setVar('thumbnailModeDishImageOfDish',  'inset' );
        $this->setVar('thumbnailWidthDishImageOfDishView', '32');
        $this->setVar('thumbnailHeightDishImageOfDishView', '24');
        $this->setVar('thumbnailWidthDishImageOfDishDisplay', '240');
        $this->setVar('thumbnailHeightDishImageOfDishDisplay', '180');
        $this->setVar('thumbnailWidthDishImageOfDishEdit', '240');
        $this->setVar('thumbnailHeightDishImageOfDishEdit', '180');
        $this->setVar('enableShrinkingForEventImageOfEvent', false);
        $this->setVar('shrinkWidthEventImageOfEvent', '800');
        $this->setVar('shrinkHeightEventImageOfEvent', '600');
        $this->setVar('thumbnailModeEventImageOfEvent',  'inset' );
        $this->setVar('thumbnailWidthEventImageOfEventView', '32');
        $this->setVar('thumbnailHeightEventImageOfEventView', '24');
        $this->setVar('thumbnailWidthEventImageOfEventDisplay', '240');
        $this->setVar('thumbnailHeightEventImageOfEventDisplay', '180');
        $this->setVar('thumbnailWidthEventImageOfEventEdit', '240');
        $this->setVar('thumbnailHeightEventImageOfEventEdit', '180');
        $this->setVar('enableShrinkingForProductImageOfProduct', false);
        $this->setVar('shrinkWidthProductImageOfProduct', '800');
        $this->setVar('shrinkHeightProductImageOfProduct', '600');
        $this->setVar('thumbnailModeProductImageOfProduct',  'inset' );
        $this->setVar('thumbnailWidthProductImageOfProductView', '32');
        $this->setVar('thumbnailHeightProductImageOfProductView', '24');
        $this->setVar('thumbnailWidthProductImageOfProductDisplay', '240');
        $this->setVar('thumbnailHeightProductImageOfProductDisplay', '180');
        $this->setVar('thumbnailWidthProductImageOfProductEdit', '240');
        $this->setVar('thumbnailHeightProductImageOfProductEdit', '180');
        $this->setVar('enabledFinderTypes', [ 'branch' ,  'location' ,  'part' ,  'offer' ,  'menuOfLocation' ,  'partOfMenu' ,  'dish' ,  'event' ,  'product' ,  'specialOfLocation' ,  'serviceOfLocation' ]);
        $this->setVar('googleMapsApiKey', '');
        $this->setVar('defaultLatitude', '0.00');
        $this->setVar('defaultLongitude', '0.00');
        $this->setVar('defaultMapType',  'roadmap' );
        $this->setVar('defaultZoomLevel', '18');
        $this->setVar('enableLocationGeoLocation', false);
        $this->setVar('enableEventGeoLocation', false);
    
        // initialisation successful
        return true;
    }
    
    /**
     * Upgrade the MUYourCityModule application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from
     *
     * @return boolean True on success, false otherwise
     *
     * @throws RuntimeException Thrown if database tables can not be updated
     */
    public function upgrade($oldVersion)
    {
    /*
        $logger = $this->container->get('logger');
    
        // Upgrade dependent on old version number
        switch ($oldVersion) {
            case '1.0.0':
                // do something
                // ...
                // update the database schema
                try {
                    $this->schemaTool->update($this->listEntityClasses());
                } catch (\Exception $exception) {
                    $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
                    $logger->error('{app}: Could not update the database tables during the upgrade. Error details: {errorMessage}.', ['app' => 'MUYourCityModule', 'errorMessage' => $exception->getMessage()]);
    
                    return false;
                }
        }
    
        // Note there are several helpers available for making migrating your extension from Zikula 1.3 to 1.4 easier.
        // The following convenience methods are each responsible for a single aspect of upgrading to Zikula 1.4.x.
    
        // here is a possible usage example
        // of course 1.2.3 should match the number you used for the last stable 1.3.x module version.
        /* if ($oldVersion = '1.2.3') {
            // rename module for all modvars
            $this->updateModVarsTo14();
            
            // update extension information about this app
            $this->updateExtensionInfoFor14();
            
            // rename existing permission rules
            $this->renamePermissionsFor14();
            
            // rename all tables
            $this->renameTablesFor14();
            
            // remove event handler definitions from database
            $this->dropEventHandlersFromDatabase();
            
            // update module name in the hook tables
            $this->updateHookNamesFor14();
            
            // update module name in the workflows table
            $this->updateWorkflowsFor14();
        } * /
    
        // remove obsolete persisted hooks from the database
        //$this->hookApi->uninstallSubscriberHooks($this->bundle->getMetaData());
    */
    
        // update successful
        return true;
    }
    
    /**
     * Renames the module name for variables in the module_vars table.
     */
    protected function updateModVarsTo14()
    {
        $conn = $this->getConnection();
        $conn->update('module_vars', ['modname' => 'MUYourCityModule'], ['modname' => 'YourCity']);
    }
    
    /**
     * Renames this application in the core's extensions table.
     */
    protected function updateExtensionInfoFor14()
    {
        $conn = $this->getConnection();
        $conn->update('modules', ['name' => 'MUYourCityModule', 'directory' => 'MU/YourCityModule'], ['name' => 'YourCity']);
    }
    
    /**
     * Renames all permission rules stored for this app.
     */
    protected function renamePermissionsFor14()
    {
        $conn = $this->getConnection();
        $componentLength = strlen('YourCity') + 1;
    
        $conn->executeQuery("
            UPDATE group_perms
            SET component = CONCAT('MUYourCityModule', SUBSTRING(component, $componentLength))
            WHERE component LIKE 'YourCity%';
        ");
    }
    
    /**
     * Renames all (existing) tables of this app.
     */
    protected function renameTablesFor14()
    {
        $conn = $this->getConnection();
    
        $oldPrefix = 'yourcity_';
        $oldPrefixLength = strlen($oldPrefix);
        $newPrefix = 'mu_yourcity_';
    
        $sm = $conn->getSchemaManager();
        $tables = $sm->listTables();
        foreach ($tables as $table) {
            $tableName = $table->getName();
            if (substr($tableName, 0, $oldPrefixLength) != $oldPrefix) {
                continue;
            }
    
            $newTableName = str_replace($oldPrefix, $newPrefix, $tableName);
    
            $conn->executeQuery("
                RENAME TABLE $tableName
                TO $newTableName;
            ");
        }
    }
    
    /**
     * Removes event handlers from database as they are now described by service definitions and managed by dependency injection.
     */
    protected function dropEventHandlersFromDatabase()
    {
        \EventUtil::unregisterPersistentModuleHandlers('YourCity');
    }
    
    /**
     * Updates the module name in the hook tables.
     */
    protected function updateHookNamesFor14()
    {
        $conn = $this->getConnection();
    
        $conn->update('hook_area', ['owner' => 'MUYourCityModule'], ['owner' => 'YourCity']);
    
        $componentLength = strlen('subscriber.yourcity') + 1;
        $conn->executeQuery("
            UPDATE hook_area
            SET areaname = CONCAT('subscriber.muyourcitymodule', SUBSTRING(areaname, $componentLength))
            WHERE areaname LIKE 'subscriber.yourcity%';
        ");
    
        $conn->update('hook_binding', ['sowner' => 'MUYourCityModule'], ['sowner' => 'YourCity']);
    
        $conn->update('hook_runtime', ['sowner' => 'MUYourCityModule'], ['sowner' => 'YourCity']);
    
        $componentLength = strlen('yourcity') + 1;
        $conn->executeQuery("
            UPDATE hook_runtime
            SET eventname = CONCAT('muyourcitymodule', SUBSTRING(eventname, $componentLength))
            WHERE eventname LIKE 'yourcity%';
        ");
    
        $conn->update('hook_subscriber', ['owner' => 'MUYourCityModule'], ['owner' => 'YourCity']);
    
        $componentLength = strlen('yourcity') + 1;
        $conn->executeQuery("
            UPDATE hook_subscriber
            SET eventname = CONCAT('muyourcitymodule', SUBSTRING(eventname, $componentLength))
            WHERE eventname LIKE 'yourcity%';
        ");
    }
    
    /**
     * Updates the module name in the workflows table.
     */
    protected function updateWorkflowsFor14()
    {
        $conn = $this->getConnection();
        $conn->update('workflows', ['module' => 'MUYourCityModule'], ['module' => 'YourCity']);
        $conn->update('workflows', ['obj_table' => 'BranchEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'branch']);
        $conn->update('workflows', ['obj_table' => 'LocationEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'location']);
        $conn->update('workflows', ['obj_table' => 'PartEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'part']);
        $conn->update('workflows', ['obj_table' => 'OfferEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'offer']);
        $conn->update('workflows', ['obj_table' => 'MenuOfLocationEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'menuOfLocation']);
        $conn->update('workflows', ['obj_table' => 'PartOfMenuEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'partOfMenu']);
        $conn->update('workflows', ['obj_table' => 'DishEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'dish']);
        $conn->update('workflows', ['obj_table' => 'EventEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'event']);
        $conn->update('workflows', ['obj_table' => 'ProductEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'product']);
        $conn->update('workflows', ['obj_table' => 'SpecialOfLocationEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'specialOfLocation']);
        $conn->update('workflows', ['obj_table' => 'ServiceOfLocationEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'serviceOfLocation']);
        $conn->update('workflows', ['obj_table' => 'AbonnementEntity'], ['module' => 'MUYourCityModule', 'obj_table' => 'abonnement']);
    }
    
    /**
     * Returns connection to the database.
     *
     * @return Connection the current connection
     */
    protected function getConnection()
    {
        $entityManager = $this->container->get('doctrine.orm.default_entity_manager');
        $connection = $entityManager->getConnection();
    
        return $connection;
    }
    
    /**
     * Returns the name of the default system database.
     *
     * @return string the database name
     */
    protected function getDbName()
    {
        return $this->container->getParameter('database_name');
    }
    
    /**
     * Uninstall MUYourCityModule.
     *
     * @return boolean True on success, false otherwise
     *
     * @throws RuntimeException Thrown if database tables or stored workflows can not be removed
     */
    public function uninstall()
    {
        $logger = $this->container->get('logger');
    
        try {
            $this->schemaTool->drop($this->listEntityClasses());
        } catch (\Exception $exception) {
            $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
            $logger->error('{app}: Could not remove the database tables during uninstallation. Error details: {errorMessage}.', ['app' => 'MUYourCityModule', 'errorMessage' => $exception->getMessage()]);
    
            return false;
        }
    
        // remove all module vars
        $this->delVars();
    
        // remind user about upload folders not being deleted
        $uploadPath = $this->container->getParameter('datadir') . '/MUYourCityModule/';
        $this->addFlash('status', $this->__f('The upload directories at "%path%" can be removed manually.', ['%path%' => $uploadPath]));
    
        // uninstallation successful
        return true;
    }
    
    /**
     * Build array with all entity classes for MUYourCityModule.
     *
     * @return array list of class names
     */
    protected function listEntityClasses()
    {
        $classNames = [];
        $classNames[] = 'MU\YourCityModule\Entity\BranchEntity';
        $classNames[] = 'MU\YourCityModule\Entity\BranchTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\LocationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\LocationTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\PartEntity';
        $classNames[] = 'MU\YourCityModule\Entity\PartTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\OfferEntity';
        $classNames[] = 'MU\YourCityModule\Entity\OfferTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\MenuOfLocationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\MenuOfLocationTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\PartOfMenuEntity';
        $classNames[] = 'MU\YourCityModule\Entity\PartOfMenuTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\DishEntity';
        $classNames[] = 'MU\YourCityModule\Entity\DishTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\EventEntity';
        $classNames[] = 'MU\YourCityModule\Entity\EventTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\ProductEntity';
        $classNames[] = 'MU\YourCityModule\Entity\ProductTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\SpecialOfLocationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\SpecialOfLocationTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\ServiceOfLocationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\ServiceOfLocationTranslationEntity';
        $classNames[] = 'MU\YourCityModule\Entity\AbonnementEntity';
    
        return $classNames;
    }
}
