<?php
/**
 * YourCity.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\YourCityModule\Listener\Base;

use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Core\Event\GenericEvent;
use Zikula\UsersModule\Api\CurrentUserApi;
use Zikula\UsersModule\UserEvents;
use MU\YourCityModule\Entity\Factory\EntityFactory;

/**
 * Event handler base class for user-related events.
 */
abstract class AbstractUserListener implements EventSubscriberInterface
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;
    
    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    /**
     * @var CurrentUserApi
     */
    protected $currentUserApi;
    
    /**
     * @var LoggerInterface
     */
    protected $logger;
    
    /**
     * UserListener constructor.
     *
     * @param TranslatorInterface $translator    Translator service instance
     * @param EntityFactory       $entityFactory EntityFactory service instance
     * @param CurrentUserApi      $currentUserApi CurrentUserApi service instance
     * @param LoggerInterface     $logger        Logger service instance
     *
     * @return void
     */
    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory,
        CurrentUserApi $currentUserApi,
        LoggerInterface $logger
    ) {
        $this->translator = $translator;
        $this->entityFactory = $entityFactory;
        $this->currentUserApi = $currentUserApi;
        $this->logger = $logger;
    }
    
    /**
     * Makes our handlers known to the event system.
     */
    public static function getSubscribedEvents()
    {
        return [
            UserEvents::CREATE_ACCOUNT => ['create', 5],
            UserEvents::UPDATE_ACCOUNT => ['update', 5],
            UserEvents::DELETE_ACCOUNT => ['delete', 5]
        ];
    }
    
    /**
     * Listener for the `user.account.create` event.
     *
     * Occurs after a user account is created. All handlers are notified.
     * It does not apply to creation of a pending registration.
     * The full user record created is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record that was created.
     *
     * @param GenericEvent $event The event instance
     */
    public function create(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `user.account.update` event.
     *
     * Occurs after a user is updated. All handlers are notified.
     * The full updated user record is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record, with the updated values.
     *
     * @param GenericEvent $event The event instance
     */
    public function update(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `user.account.delete` event.
     *
     * Occurs after the deletion of a user account. Subject is $userId.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     *
     * @param GenericEvent $event The event instance
     */
    public function delete(GenericEvent $event)
    {
        $userId = $event->getSubject();
    
        
        $repo = $this->entityFactory->getRepository('branch');
        // set creator to admin (2) for all branches created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all branches updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'branches'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('location');
        // set creator to admin (2) for all locations created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all locations updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        // delete all locations affected by this user
        $repo->deleteByUserField('owner', $userId, $this->translator, $this->logger, $this->currentUserApi);
        // delete all locations affected by this user
        $repo->deleteByUserField('admin1', $userId, $this->translator, $this->logger, $this->currentUserApi);
        // delete all locations affected by this user
        $repo->deleteByUserField('admin2', $userId, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'locations'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('part');
        // set creator to admin (2) for all parts created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all parts updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'parts'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('imageOfLocation');
        // set creator to admin (2) for all images of location created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all images of location updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'images of location'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('fileOfLocation');
        // set creator to admin (2) for all files of location created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all files of location updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'files of location'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('offer');
        // set creator to admin (2) for all offers created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all offers updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'offers'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('menuOfLocation');
        // set creator to admin (2) for all menus of location created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all menus of location updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'menus of location'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('partOfMenu');
        // set creator to admin (2) for all parts of menu created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all parts of menu updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'parts of menu'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('dish');
        // set creator to admin (2) for all dishes created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all dishes updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'dishes'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('event');
        // set creator to admin (2) for all events created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all events updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'events'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('product');
        // set creator to admin (2) for all products created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all products updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'products'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('specialOfLocation');
        // set creator to admin (2) for all specials of location created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all specials of location updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'specials of location'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('serviceOfLocation');
        // set creator to admin (2) for all services of location created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all services of location updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'services of location'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('abonnement');
        // set creator to admin (2) for all abonnements created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all abonnements updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUYourCityModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'abonnements'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
    }
}
